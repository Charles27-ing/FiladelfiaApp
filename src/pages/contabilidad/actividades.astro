---
import LayoutProtected from '@layouts/LayoutProtected.astro';
import Preloader from '@components/Preloader.astro';
import type { Actividad } from '../../models/actividad.model';

const baseUrl = Astro.url.origin;
let actividades: Actividad[] = [];
let error: string | null = null;

try {
  const res = await fetch(`${baseUrl}/api/contabilidad/actividades`);
  if (res.ok) {
    actividades = await res.json();
  } else {
    error = 'No se pudieron cargar las actividades';
  }
} catch (err) {
  error = 'Error al cargar las actividades';
}
const url = new URL(Astro.request.url);
const successMessage = url.searchParams.get('success');
const errorMessage = url.searchParams.get('error');
---
<LayoutProtected title="Gestión de Actividades">
    <div class="max-w-6xl mx-auto p-4">
        <div class="flex justify-between items-center mb-6">
          <h1 class="text-2xl font-bold">Actividades</h1>
          <a href="/contabilidad/actividades/nueva" class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700">
            Nueva Actividad
          </a>
        </div>
    
        {successMessage && (
          <div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 mb-6 rounded-md">
            {successMessage}
          </div>
        )}
        {errorMessage && (
          <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6 rounded-md">
            {errorMessage}
          </div>
        )}
        {error && (
          <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6 rounded-md">
            {error}
          </div>
        )}
    
        {actividades.length > 0 ? (
           <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
             {actividades.map((actividad) => (
               <div class={`rounded-xl shadow-lg border p-6 transition-all duration-300 hover:shadow-xl hover:scale-105 ${
                 actividad.estado === 'completada'
                   ? 'bg-gradient-to-br from-green-50 to-emerald-100 border-green-200'
                   : actividad.estado === 'en_curso'
                   ? 'bg-gradient-to-br from-blue-50 to-cyan-100 border-blue-200'
                   : 'bg-gradient-to-br from-yellow-50 to-amber-100 border-yellow-200'
               }`}>
                 <!-- Icono superior -->
                 <div class="flex items-center justify-center mb-4">
                   <div class={`p-3 rounded-full ${
                     actividad.estado === 'completada'
                       ? 'bg-green-500'
                       : actividad.estado === 'en_curso'
                       ? 'bg-blue-500'
                       : 'bg-yellow-500'
                   }`}>
                     <svg class={`h-6 w-6 text-white ${
                       actividad.estado === 'completada'
                         ? 'animate-pulse'
                         : actividad.estado === 'en_curso'
                         ? 'animate-bounce'
                         : ''
                     }`} fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                       {actividad.estado === 'completada' ? (
                         <path stroke-linecap="round" stroke-linejoin="round" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                       ) : actividad.estado === 'en_curso' ? (
                         <path stroke-linecap="round" stroke-linejoin="round" d="M13 10V3L4 14h7v7l9-11h-7z"/>
                       ) : (
                         <path stroke-linecap="round" stroke-linejoin="round" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
                       )}
                     </svg>
                   </div>
                 </div>

                 <div class="text-center mb-4">
                   <h3 class="text-lg font-bold text-gray-900 mb-2">{actividad.nombre}</h3>
                   <p class="text-sm text-gray-600 line-clamp-2">{actividad.descripcion || 'Sin descripción'}</p>
                 </div>

                 <div class="flex justify-center mb-4">
                   <span class={`px-3 py-1 rounded-full text-xs font-bold uppercase tracking-wide ${
                     actividad.estado === 'completada'
                       ? 'bg-green-200 text-green-800'
                       : actividad.estado === 'en_curso'
                       ? 'bg-blue-200 text-blue-800'
                       : 'bg-yellow-200 text-yellow-800'
                   }`}>
                     {actividad.estado.replace('_', ' ')}
                   </span>
                 </div>

                 <div class="bg-white/50 rounded-lg p-3 mb-4">
                   <p class="text-xs text-gray-700 font-medium">Meta: <span class="text-gray-900" id={`meta-${actividad.id}`}>{(actividad as any).meta?.toLocaleString() ?? '0'} COP</span></p>
                   <p class="text-xs text-gray-700 mt-1">Inicio: {new Date(actividad.fecha_inicio).toLocaleDateString('es-CO')}</p>
                 </div>

                 <div class="mb-4">
                   <div class="w-full bg-gray-200 rounded-full h-3 overflow-hidden shadow-inner">
                     <div class={`h-3 rounded-full transition-all duration-1000 ease-out ${
                       actividad.estado === 'completada'
                         ? 'bg-gradient-to-r from-green-400 to-green-600'
                         : actividad.estado === 'en_curso'
                         ? 'bg-gradient-to-r from-blue-400 to-blue-600'
                         : 'bg-gradient-to-r from-yellow-400 to-yellow-600'
                     }`} style="width: 0%" id={`progress-${actividad.id}`}></div>
                   </div>
                   <p class="text-xs text-gray-600 mt-2 text-center font-medium" id={`progress-text-${actividad.id}`}>Calculando progreso...</p>
                 </div>

                 <div class="flex items-center justify-center space-x-4">
                   <a href={`/contabilidad/actividades/${actividad.id}/seguimiento`} class="flex items-center px-3 py-2 bg-blue-500 text-white text-xs font-semibold rounded-lg hover:bg-blue-600 transition-colors duration-200">
                     <svg class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                       <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"/>
                     </svg>
                     Seguimiento
                   </a>
                   <a href={`/contabilidad/actividades/${actividad.id}/editar`} class="flex items-center px-3 py-2 bg-gray-500 text-white text-xs font-semibold rounded-lg hover:bg-gray-600 transition-colors duration-200">
                     <svg class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                       <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                     </svg>
                     Editar
                   </a>
                   <button class="flex items-center px-3 py-2 bg-red-500 text-white text-xs font-semibold rounded-lg hover:bg-red-600 transition-colors duration-200 eliminar-actividad" data-actividad-id={`${actividad.id}`}>
                     <svg class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                       <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                     </svg>
                     Eliminar
                   </button>
                 </div>
               </div>
             ))}
           </div>
        ) : (
          <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-10 text-center text-gray-500">
            No hay actividades registradas
          </div>
        )}
      </div>

      <!-- ====================================================== -->
      <!-- MODAL DE CONFIRMACIÓN DE ELIMINACIÓN -->
      <!-- ====================================================== -->
      <div id="delete-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
        <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
          <div class="mt-3 text-center">
            <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100" id="modal-icon">
              <svg class="h-6 w-6 text-red-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"/>
              </svg>
            </div>
            <h3 class="text-lg font-medium text-gray-900 mt-2" id="modal-title">Confirmar eliminación</h3>
            <div class="mt-2 px-7 py-3">
              <p class="text-sm text-gray-500" id="modal-message">
                ¿Estás seguro de que deseas eliminar esta actividad? Esto eliminará todas las transacciones asociadas.
                Esta acción no se puede deshacer.
              </p>
            </div>
            <div class="items-center px-4 py-3" id="modal-buttons">
              <button
                id="confirm-delete"
                class="px-4 py-2 bg-red-500 text-white text-base font-medium rounded-md w-24 mr-2 hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-300"
              >
                Eliminar
              </button>
              <button
                id="cancel-delete"
                class="px-4 py-2 bg-gray-500 text-white text-base font-medium rounded-md w-24 hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-300"
              >
                Cancelar
              </button>
            </div>
            <div class="items-center px-4 py-3 hidden" id="modal-error-buttons">
              <button
                id="close-error-modal"
                class="px-4 py-2 bg-blue-500 text-white text-base font-medium rounded-md w-24 hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-300"
              >
                Entendido
              </button>
            </div>
          </div>
        </div>
      </div>

      <script>
        let actividadIdToDelete: string | null = null;

        function showDeleteModal(id: string) {
          console.log('Showing delete modal for activity ID:', id);
          actividadIdToDelete = id;

          // Reset modal to confirmation state
          resetModalToConfirmation();

          const modal = document.getElementById('delete-modal');
          if (modal) {
            modal.classList.remove('hidden');
          }
        }

        function hideDeleteModal() {
          actividadIdToDelete = null;
          const modal = document.getElementById('delete-modal');
          if (modal) {
            modal.classList.add('hidden');
          }
        }

        function resetModalToConfirmation() {
          const modalIcon = document.getElementById('modal-icon');
          const modalTitle = document.getElementById('modal-title');
          const modalMessage = document.getElementById('modal-message');
          const modalButtons = document.getElementById('modal-buttons');
          const modalErrorButtons = document.getElementById('modal-error-buttons');

          if (modalIcon) modalIcon.innerHTML = `
            <svg class="h-6 w-6 text-red-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"/>
            </svg>
          `;

          if (modalTitle) modalTitle.textContent = 'Confirmar eliminación';
          if (modalMessage) modalMessage.textContent = '¿Estás seguro de que deseas eliminar esta actividad? Esto eliminará todas las transacciones asociadas. Esta acción no se puede deshacer.';
          if (modalButtons) modalButtons.classList.remove('hidden');
          if (modalErrorButtons) modalErrorButtons.classList.add('hidden');
        }

        function showErrorInModal(errorMessage: string) {
          const modalIcon = document.getElementById('modal-icon');
          const modalTitle = document.getElementById('modal-title');
          const modalMessage = document.getElementById('modal-message');
          const modalButtons = document.getElementById('modal-buttons');
          const modalErrorButtons = document.getElementById('modal-error-buttons');

          if (modalIcon) modalIcon.innerHTML = `
            <svg class="h-6 w-6 text-yellow-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"/>
            </svg>
          `;

          if (modalTitle) modalTitle.textContent = 'No se puede eliminar';
          if (modalMessage) modalMessage.textContent = errorMessage;
          if (modalButtons) modalButtons.classList.add('hidden');
          if (modalErrorButtons) modalErrorButtons.classList.remove('hidden');
        }

        async function confirmarEliminar() {
          if (!actividadIdToDelete) {
            console.error('No activity ID to delete');
            return;
          }

          console.log('Confirming deletion for activity ID:', actividadIdToDelete);

          const idToDelete = actividadIdToDelete; // Store the ID before hiding modal
          hideDeleteModal();

          // Mostrar preloader
          // @ts-ignore
          window.showPreloader('Eliminando actividad...');

          try {
            console.log('Making DELETE request to:', `/api/contabilidad/actividades/${idToDelete}`);
            const response = await fetch(`/api/contabilidad/actividades/${idToDelete}`, {
              method: 'DELETE',
              headers: {
                'X-Requested-With': 'XMLHttpRequest'
              }
            });

            console.log('Response status:', response.status);
            const data = await response.json();
            console.log('Response data:', data);

            if (response.ok && data.success) {
              // Éxito: mostrar checkmark
              // @ts-ignore
              window.showPreloaderSuccess(data.message);
              // Remover el elemento de la actividad después de 2 segundos
              setTimeout(() => {
                const actividadCard = document.querySelector(`[data-actividad-id="${idToDelete}"]`);
                if (actividadCard) {
                  const card = actividadCard.closest('.bg-white.rounded-xl');
                  if (card) {
                    card.remove();
                  }
                }
                // @ts-ignore
                window.hidePreloader();
              }, 2000);
            } else {
              // Error: mostrar mensaje en modal
              // @ts-ignore
              window.hidePreloader();
              showErrorInModal(data.error || 'Error desconocido');
              const modal = document.getElementById('delete-modal');
              if (modal) {
                modal.classList.remove('hidden');
              }
            }
          } catch (error) {
            console.error('Error al eliminar actividad:', error);
            // @ts-ignore
            window.hidePreloader();

            // Show connection error in modal
            showErrorInModal('Error de conexión. Inténtalo de nuevo.');
            const modal = document.getElementById('delete-modal');
            if (modal) {
              modal.classList.remove('hidden');
            }
          }
        }

        document.addEventListener('DOMContentLoaded', () => {
          const eliminarBotones = document.querySelectorAll('.eliminar-actividad');
          eliminarBotones.forEach((boton) => {
            boton.addEventListener('click', () => {
              const id = boton.getAttribute('data-actividad-id');
              console.log('Delete button clicked, activity ID from attribute:', id);
              if (id) {
                showDeleteModal(id);
              } else {
                console.error('No data-actividad-id attribute found on button');
              }
            });
          });

          // Modal buttons
          const confirmDeleteBtn = document.getElementById('confirm-delete');
          const cancelDeleteBtn = document.getElementById('cancel-delete');
          const closeErrorBtn = document.getElementById('close-error-modal');

          if (confirmDeleteBtn) {
            confirmDeleteBtn.addEventListener('click', confirmarEliminar);
          }

          if (cancelDeleteBtn) {
            cancelDeleteBtn.addEventListener('click', hideDeleteModal);
          }

          if (closeErrorBtn) {
            closeErrorBtn.addEventListener('click', hideDeleteModal);
          }

          // Close modal when clicking outside
          const modal = document.getElementById('delete-modal');
          if (modal) {
            modal.addEventListener('click', (e) => {
              if (e.target === modal) {
                hideDeleteModal();
              }
            });
          }

          // Close modal with Escape key
          document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
              hideDeleteModal();
            }
          });
        });
      </script>

      <script>
        (async function(){
          try {
            const cards = document.querySelectorAll('[id^="progress-"]');
            for (const el of Array.from(cards) as HTMLElement[]) {
              const id = el.id.replace('progress-', '');
              const res = await fetch(`${location.origin}/api/contabilidad/transacciones?actividad_id=${id}`);
              if (!res.ok) continue;
              const trans: any[] = await res.json();
              const ingresos = trans.reduce((s: number, t: any) => t.tipo === 'ingreso' ? s + (t.monto || 0) : s, 0);
              const metaEl = document.getElementById(`meta-${id}`);
              const metaText = metaEl?.textContent?.replace(/[^0-9]/g, '') || '0';
              const meta = parseFloat(metaText) || 0;
              const pct = meta > 0 ? Math.min((ingresos / meta) * 100, 100) : 0;
              el.style.width = `${pct.toFixed(0)}%`;
              const text = document.getElementById(`progress-text-${id}`);
              if (text) text.textContent = `${pct.toFixed(0)}% (${ingresos.toLocaleString()} / ${meta.toLocaleString()} COP)`;
            }
          } catch (e) {
            console.warn('No se pudo calcular progreso por tarjeta', e);
          }
        })();
      </script>
    
      <style>
        /* Estilos adicionales si es necesario */
      </style>

      <Preloader />
  </LayoutProtected>