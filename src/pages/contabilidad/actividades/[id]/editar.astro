---
import LayoutProtected from '@layouts/LayoutProtected.astro';
import Preloader from '@components/Preloader.astro';
import type { Actividad } from '../../../../models/actividad.model';

const { id } = Astro.params;
const baseUrl = Astro.url.origin;
let actividad: Actividad | null = null;
let error: string | null = null;

try {
  const res = await fetch(`${baseUrl}/api/contabilidad/actividades/${id}`);
  if (res.ok) {
    actividad = await res.json();
  } else {
    error = 'No se pudo cargar la actividad';
  }
} catch (err) {
  error = 'Error al cargar la actividad';
}

const url = new URL(Astro.request.url);
const errorMessage = url.searchParams.get('error');
const successMessage = url.searchParams.get('success');
---

<LayoutProtected title={`Editar Actividad - ${actividad?.nombre || 'Actividad'}`}>
  <div class="max-w-2xl mx-auto">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-2xl font-bold">Editar Actividad</h1>
      <a href="/contabilidad/actividades" class="bg-gray-300 text-gray-800 px-4 py-2 rounded-md hover:bg-gray-400">
        Volver a Actividades
      </a>
    </div>

    {error && (
      <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6 rounded-md">
        {error}
      </div>
    )}

    {errorMessage && (
      <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6 rounded-md">
        {errorMessage}
      </div>
    )}

    {successMessage && (
      <div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 mb-6 rounded-md">
        {successMessage}
      </div>
    )}

    {actividad ? (
      <div class="bg-white rounded-lg shadow-md p-6">
        <form id="actividad-form" class="space-y-6">
          
          <div>
            <label for="nombre" class="block text-sm font-medium text-gray-700 mb-2">
              Nombre de la Actividad *
            </label>
            <input
              type="text"
              id="nombre"
              name="nombre"
              required
              value={actividad.nombre}
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Ej: Campaña de Navidad 2024"
            />
          </div>

          <div>
            <label for="descripcion" class="block text-sm font-medium text-gray-700 mb-2">
              Descripción
            </label>
            <textarea
              id="descripcion"
              name="descripcion"
              rows="4"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Describe los objetivos y detalles de la actividad..."
            >{actividad.descripcion || ''}</textarea>
          </div>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label for="fecha_inicio" class="block text-sm font-medium text-gray-700 mb-2">
                Fecha de Inicio *
              </label>
              <input
                type="date"
                id="fecha_inicio"
                name="fecha_inicio"
                required
                value={actividad.fecha_inicio}
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>

            <div>
              <label for="fecha_fin" class="block text-sm font-medium text-gray-700 mb-2">
                Fecha de Fin
              </label>
              <input
                type="date"
                id="fecha_fin"
                name="fecha_fin"
                value={actividad.fecha_fin || ''}
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
          </div>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label for="estado" class="block text-sm font-medium text-gray-700 mb-2">
                Estado
              </label>
              <select
                id="estado"
                name="estado"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="planeada" selected={actividad.estado === 'planeada'}>Planeada</option>
                <option value="en_curso" selected={actividad.estado === 'en_curso'}>En Curso</option>
                <option value="completada" selected={actividad.estado === 'completada'}>Completada</option>
              </select>
            </div>

            <div>
              <label for="meta" class="block text-sm font-medium text-gray-700 mb-2">
                Meta de Recaudación (COP)
              </label>
              <input
                type="number"
                id="meta"
                name="meta"
                min="0"
                step="1000"
                value={actividad.meta}
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="0"
              />
              <div id="meta-preview" class="mt-1 text-sm text-gray-600"></div>
            </div>
          </div>

          <div class="flex justify-between items-center">
            <div>
              <a
                href={`/contabilidad/nueva-transaccion?actividad_id=${id}`}
                class="inline-flex items-center px-4 py-2 bg-green-600 text-white text-sm font-medium rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 transition-colors"
              >
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                </svg>
                Registrar Transacción
              </a>
            </div>
            <div class="flex space-x-4">
              <a
                href="/contabilidad/actividades"
                class="px-6 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                Cancelar
              </a>
              <button
                type="submit"
                class="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                Actualizar Actividad
              </button>
            </div>
          </div>
        </form>

        <!-- Botón de eliminación -->
        <div class="mt-4">
          <button
            id="delete-actividad-btn"
            class="w-full px-6 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500"
          >
            Eliminar Actividad
          </button>
        </div>
      </div>
    ) : (
      <div class="bg-white rounded-lg shadow-md p-6 text-center">
        <p class="text-gray-500">No se pudo cargar la actividad</p>
        <a href="/contabilidad/actividades" class="text-blue-600 hover:text-blue-800 mt-4 inline-block">
          Volver a Actividades
        </a>
      </div>
    )}
  </div>

  <script define:vars={{ id }}>
    // Función para formatear moneda
    function formatCurrency(amount) {
      if (amount === 0 || isNaN(amount)) return '';
      return new Intl.NumberFormat('es-CO', {
        style: 'currency',
        currency: 'COP',
        minimumFractionDigits: 0,
        maximumFractionDigits: 0
      }).format(amount);
    }

    // Validación del formulario
    document.addEventListener('DOMContentLoaded', function() {
      const form = document.getElementById('actividad-form');
      const fechaInicio = document.getElementById('fecha_inicio');
      const fechaFin = document.getElementById('fecha_fin');
      const metaInput = document.getElementById('meta');
      const metaPreview = document.getElementById('meta-preview');

      if (!form || !fechaInicio || !fechaFin || !metaInput || !metaPreview) return;

      // Validar que la fecha de fin sea posterior a la de inicio
      fechaInicio.addEventListener('change', function() {
        if (this.value) {
          fechaFin.min = this.value;
        }
      });

      // Formateo y validación de meta
      metaInput.addEventListener('input', function() {
        const value = parseFloat(this.value) || 0;

        // Mostrar vista previa formateada
        if (value > 0) {
          metaPreview.textContent = `Vista previa: ${formatCurrency(value)}`;
          metaPreview.className = 'mt-1 text-sm text-green-600';
        } else if (value < 0) {
          metaPreview.textContent = 'La meta debe ser un valor positivo';
          metaPreview.className = 'mt-1 text-sm text-red-600';
        } else {
          metaPreview.textContent = '';
        }

        // Validación: prevenir valores negativos
        if (value < 0) {
          this.value = '0';
          metaPreview.textContent = 'La meta debe ser un valor positivo';
          metaPreview.className = 'mt-1 text-sm text-red-600';
        }
      });

      // Validación inicial si hay valor
      if (metaInput.value) {
        const event = new Event('input');
        metaInput.dispatchEvent(event);
      }

      form.addEventListener('submit', async function(e) {
        e.preventDefault();

        const nombre = document.getElementById('nombre')?.value.trim();
        const fechaInicioValue = fechaInicio.value;
        const metaValue = parseFloat(metaInput.value) || 0;

        if (!nombre) {
          alert('El nombre de la actividad es requerido');
          return;
        }

        if (!fechaInicioValue) {
          alert('La fecha de inicio es requerida');
          return;
        }

        // Validar meta positiva
        if (metaValue <= 0) {
          alert('La meta de recaudación debe ser un valor positivo mayor a cero');
          metaInput.focus();
          return;
        }

        // Validar fechas si ambas están presentes
        if (fechaInicioValue && fechaFin.value && fechaFin.value < fechaInicioValue) {
          alert('La fecha de fin debe ser posterior a la fecha de inicio');
          return;
        }

        // Mostrar preloader
        window.showPreloader('Actualizando actividad...');

        try {
          const formData = new FormData(form);
          const response = await fetch(`/api/contabilidad/actividades/${id}`, {
            method: 'PUT',
            body: formData,
            headers: {
              'X-Requested-With': 'XMLHttpRequest'
            }
          });

          const data = await response.json();

          if (response.ok && data.success) {
            // Éxito: mostrar checkmark
            window.showPreloaderSuccess(data.message);
            // Redirigir después
            setTimeout(() => {
              window.location.href = '/contabilidad/actividades';
            }, 3000);
          } else {
            // Error: mostrar mensaje
            window.hidePreloader();
            alert(data.error || 'Error desconocido');
          }
        } catch (error) {
          console.error('Error al enviar el formulario:', error);
          window.hidePreloader();
          alert('Error de conexión. Inténtalo de nuevo.');
        }
      });

      // Manejo del botón eliminar
      const deleteBtn = document.getElementById('delete-actividad-btn');
      if (deleteBtn) {
        deleteBtn.addEventListener('click', async function() {
          if (!confirm('¿Estás seguro de que deseas eliminar esta actividad? Esta acción no se puede deshacer.')) {
            return;
          }

          // Mostrar preloader
          window.showPreloader('Eliminando actividad...');

          try {
            const response = await fetch(`/api/contabilidad/actividades/${id}`, {
              method: 'DELETE',
              headers: {
                'X-Requested-With': 'XMLHttpRequest'
              }
            });

            const data = await response.json();

            if (response.ok && data.success) {
              // Éxito: mostrar checkmark
              window.showPreloaderSuccess(data.message);
              // Redirigir después
              setTimeout(() => {
                window.location.href = '/contabilidad/actividades';
              }, 3000);
            } else {
              // Error: mostrar mensaje
              window.hidePreloader();
              alert(data.error || 'Error desconocido');
            }
          } catch (error) {
            console.error('Error al eliminar:', error);
            window.hidePreloader();
            alert('Error de conexión. Inténtalo de nuevo.');
          }
        });
      }
    });
  </script>

  <Preloader />
</LayoutProtected>
