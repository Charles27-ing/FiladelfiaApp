---
import LayoutProtected from '@layouts/LayoutProtected.astro';
import Preloader from '@components/Preloader.astro';

interface Categoria {
  id: string;
  nombre: string;
  tipo: 'ingreso' | 'egreso';
  descripcion: string | null;
}

const baseUrl = Astro.url.origin;
let categorias: Categoria[] = [];
let error: string | null = null;

try {
  const res = await fetch(`${baseUrl}/api/contabilidad/categorias`);
  if (res.ok) {
    categorias = await res.json();
  } else {
    error = 'No se pudieron cargar las categorías';
  }
} catch (err) {
  error = 'Error al cargar las categorías';
}

const url = new URL(Astro.request.url);
const successMessage = url.searchParams.get('success');
const errorMessage = url.searchParams.get('error');
---

<LayoutProtected title="Gestión de Categorías">
  <div class="max-w-6xl mx-auto p-4">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-2xl font-bold">Categorías</h1>
      <a href="/contabilidad/categorias/nueva" class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700">
        Nueva Categoría
      </a>
    </div>

    {successMessage && (
      <div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 mb-6 rounded-md">
        {successMessage}
      </div>
    )}
    {errorMessage && (
      <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6 rounded-md">
        {errorMessage}
      </div>
    )}
    {error && (
      <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6 rounded-md">
        {error}
      </div>
    )}

    <div class="bg-white rounded-xl shadow-sm border border-gray-100 overflow-x-auto">
      {categorias.length > 0 ? (
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nombre</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tipo</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Descripción</th>
              <th scope="col" class="relative px-6 py-3">
                <span class="sr-only">Acciones</span>
              </th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            {categorias.map((categoria) => (
              <tr id={`categoria-${categoria.id}`}>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm font-medium text-gray-900">{categoria.nombre}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${categoria.tipo === 'ingreso' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                    {categoria.tipo}
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {categoria.descripcion || 'N/A'}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                  <a href={`/contabilidad/categorias/${categoria.id}/editar`} class="text-indigo-600 hover:text-indigo-900">Editar</a>
                  <button class="text-red-600 hover:text-red-900 ml-4 eliminar-categoria" data-categoria-id={`${categoria.id}`}>Eliminar</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      ) : (
        <div class="p-10 text-center text-gray-500">
          No hay categorías registradas.
        </div>
      )}
    </div>
  </div>

  <!-- ====================================================== -->
  <!-- MODAL DE CONFIRMACIÓN DE ELIMINACIÓN -->
  <!-- ====================================================== -->
  <div id="delete-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
      <div class="mt-3 text-center">
        <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100" id="modal-icon">
          <svg class="h-6 w-6 text-red-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"/>
          </svg>
        </div>
        <h3 class="text-lg font-medium text-gray-900 mt-2" id="modal-title">Confirmar eliminación</h3>
        <div class="mt-2 px-7 py-3">
          <p class="text-sm text-gray-500" id="modal-message">
            ¿Estás seguro de que deseas eliminar esta categoría?
            Esta acción no se puede deshacer.
          </p>
        </div>
        <div class="items-center px-4 py-3" id="modal-buttons">
          <button
            id="confirm-delete"
            class="px-4 py-2 bg-red-500 text-white text-base font-medium rounded-md w-24 mr-2 hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-300"
          >
            Eliminar
          </button>
          <button
            id="cancel-delete"
            class="px-4 py-2 bg-gray-500 text-white text-base font-medium rounded-md w-24 hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-300"
          >
            Cancelar
          </button>
        </div>
        <div class="items-center px-4 py-3 hidden" id="modal-error-buttons">
          <button
            id="close-error-modal"
            class="px-4 py-2 bg-blue-500 text-white text-base font-medium rounded-md w-24 hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-300"
          >
            Entendido
          </button>
        </div>
      </div>
    </div>
  </div>

  <script>
    let categoriaIdToDelete: string | null = null;

    function showDeleteModal(id: string) {
      console.log('Showing delete modal for ID:', id);
      categoriaIdToDelete = id;

      // Reset modal to confirmation state
      resetModalToConfirmation();

      const modal = document.getElementById('delete-modal');
      if (modal) {
        modal.classList.remove('hidden');
      }
    }

    function hideDeleteModal() {
      categoriaIdToDelete = null;
      const modal = document.getElementById('delete-modal');
      if (modal) {
        modal.classList.add('hidden');
      }
    }

    function resetModalToConfirmation() {
      const modalIcon = document.getElementById('modal-icon');
      const modalTitle = document.getElementById('modal-title');
      const modalMessage = document.getElementById('modal-message');
      const modalButtons = document.getElementById('modal-buttons');
      const modalErrorButtons = document.getElementById('modal-error-buttons');

      if (modalIcon) modalIcon.innerHTML = `
        <svg class="h-6 w-6 text-red-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"/>
        </svg>
      `;

      if (modalTitle) modalTitle.textContent = 'Confirmar eliminación';
      if (modalMessage) modalMessage.textContent = '¿Estás seguro de que deseas eliminar esta categoría? Esta acción no se puede deshacer.';
      if (modalButtons) modalButtons.classList.remove('hidden');
      if (modalErrorButtons) modalErrorButtons.classList.add('hidden');
    }

    function showErrorInModal(errorMessage: string) {
      const modalIcon = document.getElementById('modal-icon');
      const modalTitle = document.getElementById('modal-title');
      const modalMessage = document.getElementById('modal-message');
      const modalButtons = document.getElementById('modal-buttons');
      const modalErrorButtons = document.getElementById('modal-error-buttons');

      if (modalIcon) modalIcon.innerHTML = `
        <svg class="h-6 w-6 text-yellow-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"/>
        </svg>
      `;

      if (modalTitle) modalTitle.textContent = 'No se puede eliminar';
      if (modalMessage) modalMessage.textContent = errorMessage;
      if (modalButtons) modalButtons.classList.add('hidden');
      if (modalErrorButtons) modalErrorButtons.classList.remove('hidden');
    }

    async function confirmarEliminar() {
      if (!categoriaIdToDelete) {
        console.error('No category ID to delete');
        return;
      }

      console.log('Confirming deletion for ID:', categoriaIdToDelete);

      const idToDelete = categoriaIdToDelete; // Store the ID before hiding modal
      hideDeleteModal();

      // @ts-ignore
      window.showPreloader('Eliminando categoría...');

      try {
        console.log('Making DELETE request to:', `/api/contabilidad/categorias/${idToDelete}`);
        const response = await fetch(`/api/contabilidad/categorias/${idToDelete}`, {
          method: 'DELETE',
        });

        console.log('Response status:', response.status);

        if (response.ok) {
          const result = await response.json();
          console.log('Success response:', result);
          // @ts-ignore
          window.showPreloaderSuccess(result.message || 'Categoría eliminada con éxito');
          setTimeout(() => {
            const row = document.getElementById(`categoria-${idToDelete}`);
            if (row) {
              row.remove();
            }
            // @ts-ignore
            window.hidePreloader();
          }, 2000);
        } else {
          const error = await response.json();
          console.log('Error response:', error);
          // @ts-ignore
          window.hidePreloader();

          // Show error in modal instead of alert
          showErrorInModal(error.error || 'No se pudo eliminar la categoría');
          const modal = document.getElementById('delete-modal');
          if (modal) {
            modal.classList.remove('hidden');
          }
        }
      } catch (error) {
        console.error('Error al eliminar categoría:', error);
        // @ts-ignore
        window.hidePreloader();

        // Show connection error in modal
        showErrorInModal('Error de conexión al intentar eliminar la categoría.');
        const modal = document.getElementById('delete-modal');
        if (modal) {
          modal.classList.remove('hidden');
        }
      }
    }

    document.addEventListener('DOMContentLoaded', () => {
      const eliminarBotones = document.querySelectorAll('.eliminar-categoria');
      eliminarBotones.forEach((boton) => {
        boton.addEventListener('click', () => {
          const id = boton.getAttribute('data-categoria-id');
          console.log('Delete button clicked, ID from attribute:', id);
          if (id) {
            showDeleteModal(id);
          } else {
            console.error('No data-categoria-id attribute found on button');
          }
        });
      });

      // Modal buttons
      const confirmDeleteBtn = document.getElementById('confirm-delete');
      const cancelDeleteBtn = document.getElementById('cancel-delete');
      const closeErrorBtn = document.getElementById('close-error-modal');

      if (confirmDeleteBtn) {
        confirmDeleteBtn.addEventListener('click', confirmarEliminar);
      }

      if (cancelDeleteBtn) {
        cancelDeleteBtn.addEventListener('click', hideDeleteModal);
      }

      if (closeErrorBtn) {
        closeErrorBtn.addEventListener('click', hideDeleteModal);
      }

      // Close modal when clicking outside
      const modal = document.getElementById('delete-modal');
      if (modal) {
        modal.addEventListener('click', (e) => {
          if (e.target === modal) {
            hideDeleteModal();
          }
        });
      }

      // Close modal with Escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          hideDeleteModal();
        }
      });
    });
  </script>

  <Preloader />
</LayoutProtected>
