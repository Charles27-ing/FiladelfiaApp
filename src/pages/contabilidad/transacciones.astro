---
import Layout from '../../layouts/Layout.astro';
import { initializeTransaccionesFilters } from '../../scripts/transacciones-filters';

// Definición de tipos
interface Transaccion {
  id: string;
  fecha: string;
  monto: number;
  tipo: 'ingreso' | 'egreso';
  categoria_id: string;
  categoria_nombre: string;
  actividad_id?: string;
  actividad_nombre?: string;
  persona_id?: string;
  persona_nombre?: string;
  descripcion?: string;
  evidencia?: string;
}

interface Actividad {
  id: string;
  nombre: string;
}

// Cargar transacciones y actividades
const baseUrl = Astro.url.origin;
let transacciones: Transaccion[] = [];
let actividades: Actividad[] = [];
let error: string | null = null;

try {
  const [transaccionesRes, actividadesRes] = await Promise.all([
    fetch(`${baseUrl}/api/contabilidad/transacciones`),
    fetch(`${baseUrl}/api/contabilidad/actividades`)
  ]);

  if (transaccionesRes.ok) {
    transacciones = await transaccionesRes.json();
    console.log('Transacciones recibidas en Astro:', transacciones);
  } else {
    error = 'No se pudieron cargar las transacciones';
    console.error('Error cargando transacciones:', await transaccionesRes.text());
  }

  if (actividadesRes.ok) {
    actividades = await actividadesRes.json();
    console.log('Actividades recibidas en Astro:', actividades);
  } else {
    console.error('Error cargando actividades:', await actividadesRes.text());
  }
} catch (err) {
  error = 'Error al cargar los datos';
  console.error('Error en carga:', err);
}

// Obtener mensajes de URL
const url = new URL(Astro.request.url);
const successMessage = url.searchParams.get('success');
const errorMessage = url.searchParams.get('error');
---
<Layout title="Listado de Transacciones">
  <div class="max-w-7xl mx-auto p-4">
    <h1 class="text-2xl font-bold mb-6">Listado de Transacciones</h1>

    <!-- Mensajes -->
    {successMessage && (
      <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4">
        {successMessage}
      </div>
    )}
    {errorMessage && (
      <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
        {errorMessage}
      </div>
    )}
    {error && (
      <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
        {error}
      </div>
    )}

    <!-- Filtros -->
    <div class="mb-6 flex flex-col sm:flex-row gap-4">
      <div class="flex-1">
        <label for="actividad_filter" class="block text-sm font-medium text-gray-700">Filtrar por Actividad</label>
        <select id="actividad_filter" class="mt-1 block w-full border rounded-md p-2">
          <option value="">Todas las actividades</option>
          {actividades.map((act: Actividad) => (
            <option value={act.id}>{act.nombre}</option>
          ))}
        </select>
      </div>
      <div class="flex-1">
        <label for="fecha_inicio" class="block text-sm font-medium text-gray-700">Fecha Inicio</label>
        <input type="date" id="fecha_inicio" class="mt-1 block w-full border rounded-md p-2" />
      </div>
      <div class="flex-1">
        <label for="fecha_fin" class="block text-sm font-medium text-gray-700">Fecha Fin</label>
        <input type="date" id="fecha_fin" class="mt-1 block w-full border rounded-md p-2" />
      </div>
      <div class="flex gap-2 self-end">
        <button id="search_btn" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
          Buscar
        </button>
        <button id="clear_filters" class="bg-gray-200 text-gray-700 px-4 py-2 rounded hover:bg-gray-300">
          Limpiar Filtros
        </button>
      </div>
    </div>

 <!-- Resumen por actividad -->
 <div id="resumen-container" class="mb-6 hidden">
  <h2 class="text-lg font-semibold">Resumen de Actividad</h2>
  <div class="bg-gray-50 p-4 rounded">
    <p>Ingresos: <span id="resumen-ingresos" class="font-bold"></span></p>
    <p>Egresos: <span id="resumen-egresos" class="font-bold"></span></p>
    <p>Neto: <span id="resumen-neto" class="font-bold"></span></p>
  </div>
</div>

<!-- Tabla Desktop -->
<div class="hidden md:block overflow-x-auto">
  <table class="min-w-full border-collapse">
    <thead>
      <tr class="bg-gray-100">
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Fecha</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Monto</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Tipo</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Categoría</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Actividad</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Persona</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Descripción</th>
      </tr>
    </thead>
    <tbody id="transacciones-container" class="bg-white divide-y divide-gray-200">
      <!-- Llenado por JS -->
    </tbody>
  </table>
</div>

<!-- Tarjetas Móvil -->
<div id="transacciones-container-mobile" class="md:hidden space-y-4">
  <!-- Llenado por JS -->
</div>

<!-- Paginación -->
<div class="mt-6 flex items-center justify-between">
  <div>
    Mostrando <span id="pagination-from">1</span> a <span id="pagination-to">5</span> de <span id="pagination-total">0</span> transacciones
  </div>
  <div class="flex space-x-2">
    <button id="prev-btn" class="px-4 py-2 bg-gray-200 rounded disabled:opacity-50">Anterior</button>
    <button id="next-btn" class="px-4 py-2 bg-gray-200 rounded disabled:opacity-50">Siguiente</button>
  </div>
</div>
</div>

  <script define:vars={{ transacciones, actividades }}>
    console.log('Script cargado en transacciones.astro');
    console.log('Transacciones recibidas:', transacciones);
    console.log('Actividades recibidas:', actividades);
    
    // Esperar a que el DOM esté completamente cargado
    document.addEventListener('DOMContentLoaded', () => {
      // Importar y ejecutar la función de inicialización
      import('/src/scripts/transacciones-filters.ts').then(module => {
        module.initializeTransaccionesFilters(transacciones, actividades);
      }).catch(error => {
        console.error('Error cargando el módulo de filtros:', error);
      });
    });
  </script>

  <style>
    table th, table td {
      border: 1px solid #e5e7eb;
    }
    input:focus, select:focus {
      outline: none;
      border-color: #3b82f6;
      box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.3);
    }
  </style>
</Layout>

 