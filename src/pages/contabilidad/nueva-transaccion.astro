---
import LayoutProtected from '@layouts/LayoutProtected.astro';
import Layout from '../../layouts/Layout.astro';

// Definición de tipos
interface Categoria {
  id: string;
  nombre: string;
  tipo: string;
}

interface Actividad {
  id: string;
  nombre: string;
}

interface Persona {
  id: string;
  nombre_completo: string;
  documento_identidad?: string;
}

// Obtener la URL base
const baseUrl = Astro.url.origin;

// Estado inicial
let categorias: Categoria[] = [];
let actividades: Actividad[] = [];
let error: string | null = null;

// Cargar categorías y actividades para los dropdowns
try {
  console.log('Solicitando categorías a:', `${baseUrl}/api/contabilidad/categorias`);
  const [categoriasRes, actividadesRes] = await Promise.all([
    fetch(`${baseUrl}/api/contabilidad/categorias`),
    fetch(`${baseUrl}/api/contabilidad/actividades`)
  ]);
  
  if (categoriasRes.ok) {
    const categoriasData = await categoriasRes.json();
    //console.log('Respuesta de categorías:', categoriasData);
    categorias = categoriasData;
  } else {
    const errorText = await categoriasRes.text();
    console.error('Error cargando categorías:', errorText);
    error = 'No se pudieron cargar las categorías';
  }
  
  if (actividadesRes.ok) {
    actividades = await actividadesRes.json();
  } else {
    console.error('Error cargando actividades:', await actividadesRes.text());
  }
} catch (err) {
  const errorObj = err as Error;
  console.error('Error en la carga de datos:', errorObj);
  error = 'Error al cargar los datos necesarios';
}

// Obtener mensajes de URL (success/error)
const url = new URL(Astro.request.url);
const successMessage = url.searchParams.get('success');
const errorMessage = url.searchParams.get('error');
---

<LayoutProtected title="Registrar Nueva Transacción">
  <div class="max-w-5xl mx-auto p-6 bg-white rounded-xl shadow-md">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-2xl font-bold text-gray-800">Registrar Nueva Transacción</h1>
      <a href="/contabilidad/transacciones" class="flex items-center gap-2 text-gray-600 hover:text-gray-800 transition-colors">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
        </svg>
        Volver a transacciones
      </a>
    </div>

    <!-- Mensajes de éxito/error -->
    {successMessage && (
      <div class="bg-green-50 border-l-4 border-green-500 text-green-700 p-4 mb-6 rounded">
        <div class="flex">
          <div class="flex-shrink-0">
            <svg class="h-5 w-5 text-green-500" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
            </svg>
          </div>
          <div class="ml-3">
            <p class="text-sm font-medium">{successMessage}</p>
          </div>
        </div>
      </div>
    )}
    
    {errorMessage && (
      <div class="bg-red-50 border-l-4 border-red-500 text-red-700 p-4 mb-6 rounded">
        <div class="flex">
          <div class="flex-shrink-0">
            <svg class="h-5 w-5 text-red-500" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 0L6 8.586 4.707 7.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
            </svg>
          </div>
          <div class="ml-3">
            <p class="text-sm font-medium">{errorMessage}</p>
          </div>
        </div>
      </div>
    )}

    <form id="transaccion-form" method="POST" action="/api/contabilidad/transacciones" class="space-y-6">
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <!-- Columna Izquierda -->
        <div class="space-y-6">
          <!-- Búsqueda de persona -->
          <div class="relative">
            <label for="persona_buscar" class="block text-sm font-medium text-gray-700 mb-1">Buscar Persona</label>
            <div class="relative">
              <input 
                type="text" 
                id="persona_buscar" 
                name="persona_buscar" 
                placeholder="Nombre o documento..." 
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm"
                autocomplete="off"
              />
              <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                <svg class="h-4 w-4 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
              </div>
            </div>
            <input type="hidden" id="persona_id" name="persona_id" value="" />
            <div id="persona_resultados" class="hidden absolute z-10 w-full mt-1 bg-white border border-gray-200 rounded-md shadow-lg max-h-60 overflow-auto text-sm"></div>
            <div id="persona_seleccionada" class="mt-2 p-2 bg-gray-50 rounded-md border border-gray-200 text-sm hidden"></div>
          </div>

          <!-- Fecha y Tipo -->
          <div class="grid grid-cols-2 gap-4">
            <div>
              <label for="fecha" class="block text-sm font-medium text-gray-700 mb-1">Fecha</label>
              <input 
                type="date" 
                id="fecha" 
                name="fecha" 
                required 
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm"
              />
            </div>
            <div>
              <label for="tipo" class="block text-sm font-medium text-gray-700 mb-1">Tipo</label>
              <select 
                id="tipo" 
                name="tipo" 
                required 
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm bg-white"
              >
                <option value="ingreso">Ingreso</option>
                <option value="egreso">Egreso</option>
              </select>
            </div>
          </div>

          <!-- Monto -->
          <div>
            <label for="monto" class="block text-sm font-medium text-gray-700 mb-1">Monto</label>
            <div class="relative rounded-md shadow-sm">
              <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <span class="text-gray-500 sm:text-sm">$</span>
              </div>
              <input 
                type="number" 
                id="monto" 
                name="monto" 
                step="0.01" 
                min="0.01" 
                required 
                class="focus:ring-blue-500 focus:border-blue-500 block w-full pl-7 pr-12 sm:text-sm border-gray-300 rounded-md py-2 border"
                placeholder="0.00"
              />
              <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                <span class="text-gray-500 sm:text-sm">COP</span>
              </div>
            </div>
          </div>
        </div>

        <!-- Columna Derecha -->
        <div class="space-y-4">
          <!-- Categoría -->
          <div>
            <label for="categoria_id" class="block text-sm font-medium text-gray-700 mb-1">Categoría</label>
            <select 
              id="categoria_id" 
              name="categoria_id" 
              required 
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm bg-white"
            >
              <option value="">Seleccione una categoría</option>
              {categorias.map((cat: Categoria) => (
                <option value={cat.id} data-tipo={cat.tipo}>
                  {cat.nombre} ({cat.tipo === 'ingreso' ? 'Ingreso' : 'Egreso'})
                </option>
              ))}
            </select>
          </div>

          <!-- Actividad -->
          <div>
            <label for="actividad_id" class="block text-sm font-medium text-gray-700 mb-1">Actividad (opcional)</label>
            <select 
              id="actividad_id" 
              name="actividad_id" 
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm bg-white"
            >
              <option value="">Ninguna</option>
              {actividades.map((act: Actividad) => (
                <option value={act.id}>{act.nombre}</option>
              ))}
            </select>
          </div>

          <!-- Descripción -->
          <div>
            <label for="descripcion" class="block text-sm font-medium text-gray-700 mb-1">Descripción</label>
            <textarea 
              id="descripcion" 
              name="descripcion" 
              rows="3"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm"
              placeholder="Detalles de la transacción..."
            ></textarea>
          </div>

          <!-- Evidencia -->
          <div>
            <label for="evidencia" class="block text-sm font-medium text-gray-700 mb-1">URL de evidencia (opcional)</label>
            <div class="mt-1 flex rounded-md shadow-sm">
              <span class="inline-flex items-center px-3 rounded-l-md border border-r-0 border-gray-300 bg-gray-50 text-gray-500 text-sm">
                https://
              </span>
              <input 
                type="text" 
                id="evidencia" 
                name="evidencia" 
                class="focus:ring-blue-500 focus:border-blue-500 flex-1 block w-full rounded-none rounded-r-md sm:text-sm border-gray-300 py-2 px-3 border"
                placeholder="ejemplo.com/recibo"
              />
            </div>
          </div>
        </div>
      </div>

      <!-- Botón de envío -->
      <div class="pt-4 border-t border-gray-200">
        <button 
          type="submit" 
          class="w-full md:w-auto flex justify-center items-center px-6 py-2.5 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-colors"
        >
          <svg class="-ml-1 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
          </svg>
          Registrar Transacción
        </button>
      </div>
    </form>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', async () => {
      // Cargar jsPDF dinámicamente
     // const { jsPDF } = await import('https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js');
      
      const form = document.getElementById('transaccion-form');
      const tipoSelect = document.getElementById('tipo') as HTMLSelectElement;
      const categoriaSelect = document.getElementById('categoria_id') as HTMLSelectElement;
      const actividadSelect = document.getElementById('actividad_id') as HTMLSelectElement;
      const personaBuscar = document.getElementById('persona_buscar') as HTMLInputElement;
      const personaId = document.getElementById('persona_id') as HTMLInputElement;
      const resultadosDiv = document.getElementById('persona_resultados') as HTMLDivElement;
      
      if (!form || !tipoSelect || !categoriaSelect || !actividadSelect || !personaBuscar || !personaId || !resultadosDiv) {
        console.error('No se encontraron todos los elementos necesarios');
        return;
      }

      // Función para formatear moneda
      function formatCurrency(amount: number): string {
        return new Intl.NumberFormat('es-CO', { 
          style: 'currency', 
          currency: 'COP',
          minimumFractionDigits: 0,
          maximumFractionDigits: 0
        }).format(amount);
      }

      // Función para formatear fecha
      function formatDate(dateString: string): string {
        const options: Intl.DateTimeFormatOptions = { 
          year: 'numeric', 
          month: 'long', 
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        };
        return new Date(dateString).toLocaleDateString('es-CO', options);
      }

      // Manejar búsqueda de personas
      let searchTimeout: number | null = null;
      
      personaBuscar.addEventListener('input', (e) => {
        const query = (e.target as HTMLInputElement).value.trim();
        
        if (searchTimeout) {
          clearTimeout(searchTimeout);
        }
        
        if (query.length < 2) {
          resultadosDiv.innerHTML = '';
          resultadosDiv.classList.add('hidden');
          return;
        }
        
        searchTimeout = window.setTimeout(async () => {
          try {
            const response = await fetch(`/api/personas/buscar?q=${encodeURIComponent(query)}`);
            if (!response.ok) throw new Error('Error en la búsqueda');
            
            const personas = await response.json();
            
            if (personas.length === 0) {
              resultadosDiv.innerHTML = '<div class="p-2 text-gray-500">No se encontraron resultados</div>';
              resultadosDiv.classList.remove('hidden');
              return;
            }
            
            resultadosDiv.innerHTML = personas.map((persona: any) => `
              <div class="p-2 hover:bg-gray-100 cursor-pointer" data-id="${persona.id}">
                ${persona.nombre_completo}${persona.documento_identidad ? ` (${persona.documento_identidad})` : ''}
              </div>
            `).join('');
            
            resultadosDiv.classList.remove('hidden');
            
            // Agregar manejadores de clic a los resultados
            resultadosDiv.querySelectorAll('div[data-id]').forEach(div => {
              div.addEventListener('click', () => {
                const id = div.getAttribute('data-id');
                const nombre = div.textContent?.trim().split(' (')[0] || '';
                personaId.value = id || '';
                personaBuscar.value = nombre;
                resultadosDiv.classList.add('hidden');
              });
            });
            
          } catch (error) {
            console.error('Error buscando personas:', error);
            resultadosDiv.innerHTML = '<div class="p-2 text-red-500">Error al buscar personas</div>';
            resultadosDiv.classList.remove('hidden');
          }
        }, 300);
      });
      
      // Ocultar resultados al hacer clic fuera
      document.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        if (target !== personaBuscar && !resultadosDiv.contains(target)) {
          resultadosDiv.classList.add('hidden');
        }
      });

      // Manejar envío del formulario
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
        if (!submitButton) return;
        
        const originalButtonText = submitButton.innerHTML;
        
        try {
          // Mostrar indicador de carga
          submitButton.disabled = true;
          submitButton.innerHTML = `
            <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Procesando...
          `;
          
          const formData = new FormData(form);
          const response = await fetch(form.action, {
            method: 'POST',
            body: formData,
            headers: { 'Accept': 'application/json' }
          });
          
          const result = await response.json();
          
          if (!response.ok) {
            throw new Error(result.error || 'Error al guardar la transacción');
          }
          
          // Mostrar mensaje de éxito
          const successDiv = document.createElement('div');
          successDiv.className = 'bg-green-50 border-l-4 border-green-500 text-green-700 p-4 mb-6 rounded';
          successDiv.innerHTML = `
            <div class="flex">
              <div class="flex-shrink-0">
                <svg class="h-5 w-5 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                </svg>
              </div>
              <div class="ml-3">
                <p class="text-sm font-medium">¡Transacción guardada con éxito!</p>
                <div class="mt-2 flex flex-wrap gap-2">
                  <a href="/contabilidad/transacciones" class="inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded text-blue-700 bg-blue-100 hover:bg-blue-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    Ver todas las transacciones
                  </a>
                  <button type="button" id="export-pdf" class="inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded text-red-700 bg-red-100 hover:bg-red-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                    <svg class="h-4 w-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
                    </svg>
                    Exportar a PDF
                  </button>
                  <button type="button" id="export-excel" class="inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded text-green-700 bg-green-100 hover:bg-green-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                    <svg class="h-4 w-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                    </svg>
                    Exportar a Excel
                  </button>
                </div>
              </div>
            </div>
          `;
          
          // Insertar el mensaje de éxito antes del formulario
          form.parentNode?.insertBefore(successDiv, form);
          
          // Desplazar la vista al mensaje de éxito
          successDiv.scrollIntoView({ behavior: 'smooth' });
          
          // Manejadores para los botones de exportación
          document.getElementById('export-pdf')?.addEventListener('click', () => {
            generatePDF(result);
          });
          
          document.getElementById('export-excel')?.addEventListener('click', () => {
            exportToExcel(result);
          });
          
          // Limpiar el formulario
          form.reset();
          
        } catch (error) {
          console.error('Error al enviar el formulario:', error);
          
          // Mostrar mensaje de error
          const errorDiv = document.createElement('div');
          errorDiv.className = 'bg-red-50 border-l-4 border-red-500 text-red-700 p-4 mb-6 rounded';
          errorDiv.innerHTML = `
            <div class="flex">
              <div class="flex-shrink-0">
                <svg class="h-5 w-5 text-red-500" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 0L6 8.586 4.707 7.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                </svg>
              </div>
              <div class="ml-3">
                <p class="text-sm font-medium">${error instanceof Error ? error.message : 'Error al procesar la transacción'}</p>
              </div>
            </div>
          `;
          
          // Insertar el mensaje de error antes del formulario
          form.parentNode?.insertBefore(errorDiv, form);
          
          // Desplazar la vista al mensaje de error
          errorDiv.scrollIntoView({ behavior: 'smooth' });
          
        } finally {
          // Restaurar el botón
          if (submitButton) {
            submitButton.disabled = false;
            submitButton.innerHTML = originalButtonText;
          }
        }
      });
      
      // Función para generar PDF
      async function generatePDF(transaccion: any) {
        try {
          const doc = new jsPDF();
          
          // Configuración del documento
          doc.setFont('helvetica');
          doc.setFontSize(18);
          doc.setTextColor(0, 0, 0);
          
          // Título
          doc.text('COMPROBANTE DE TRANSACCIÓN', 105, 20, { align: 'center' });
          
          // Línea divisoria
          doc.setDrawColor(0, 0, 0);
          doc.setLineWidth(0.5);
          doc.line(20, 25, 190, 25);
          
          // Información de la transacción
          doc.setFontSize(12);
          let y = 40;
          
          // Fecha y Número
          doc.setFont(undefined, 'bold');
          doc.text('Fecha:', 20, y);
          doc.setFont(undefined, 'normal');
          doc.text(new Date(transaccion.fecha).toLocaleString('es-CO'), 60, y);
          
          doc.setFont(undefined, 'bold');
          doc.text('N° Transacción:', 120, y);
          doc.setFont(undefined, 'normal');
          doc.text(`#${transaccion.id || 'N/A'}`, 160, y);
          y += 10;
          
          // Tipo y Monto
          doc.setFont(undefined, 'bold');
          doc.text('Tipo:', 20, y);
          doc.setFont(undefined, 'normal');
          doc.text(transaccion.tipo === 'ingreso' ? 'Ingreso' : 'Egreso', 60, y);
          
          doc.setFont(undefined, 'bold');
          doc.text('Monto:', 120, y);
          doc.setFont(undefined, 'bold');
          doc.setTextColor(22, 163, 74); // Verde para el monto
          doc.text(formatCurrency(transaccion.monto), 160, y);
          doc.setTextColor(0, 0, 0); // Volver a negro
          y += 15;
          
          // Categoría y Actividad
          doc.setFont(undefined, 'bold');
          doc.text('Categoría:', 20, y);
          doc.setFont(undefined, 'normal');
          doc.text(transaccion.categoria_nombre || 'N/A', 60, y);
          y += 10;
          
          if (transaccion.actividad_nombre) {
            doc.setFont(undefined, 'bold');
            doc.text('Actividad:', 20, y);
            doc.setFont(undefined, 'normal');
            doc.text(transaccion.actividad_nombre, 60, y);
            y += 10;
          }
          
          // Persona
          if (transaccion.persona_nombre) {
            doc.setFont(undefined, 'bold');
            doc.text('Persona:', 20, y);
            doc.setFont(undefined, 'normal');
            doc.text(transaccion.persona_nombre, 60, y);
            y += 15;
          } else {
            y += 5;
          }
          
          // Descripción
          if (transaccion.descripcion) {
            doc.setFont(undefined, 'bold');
            doc.text('Descripción:', 20, y);
            y += 7;
            
            // Dividir la descripción en líneas
            const descripcion = doc.splitTextToSize(transaccion.descripcion, 170);
            doc.setFont(undefined, 'normal');
            doc.text(descripcion, 20, y + 5);
          }
          
          // Guardar el PDF
          doc.save(`transaccion_${transaccion.id || 'nueva'}.pdf`);
          
        } catch (error) {
          console.error('Error al generar el PDF:', error);
          alert('Error al generar el PDF: ' + (error instanceof Error ? error.message : 'Error desconocido'));
        }
      }
      
      // Función para exportar a Excel
      async function exportToExcel(transaccion: any) {
        try {
          // Importar dinámicamente la biblioteca XLSX
          const XLSX = await import('https://cdn.sheetjs.com/xlsx-0.19.3/package/xlsx.mjs');
          
          // Crear un libro de trabajo
          const wb = XLSX.utils.book_new();
          
          // Crear una hoja con los datos de la transacción
          const wsData = [
            ['Campo', 'Valor'],
            ['ID', transaccion.id || 'N/A'],
            ['Fecha', new Date(transaccion.fecha).toLocaleString('es-CO')],
            ['Tipo', transaccion.tipo === 'ingreso' ? 'Ingreso' : 'Egreso'],
            ['Monto', transaccion.monto],
            ['Categoría', transaccion.categoria_nombre || 'N/A'],
            ['Actividad', transaccion.actividad_nombre || 'N/A'],
            ['Persona', transaccion.persona_nombre || 'N/A'],
            ['Descripción', transaccion.descripcion || '']
          ];
          
          const ws = XLSX.utils.aoa_to_sheet(wsData);
          
          // Ajustar el ancho de las columnas
          ws['!cols'] = [
            { wch: 15 }, // Ancho para la columna de campos
            { wch: 40 }  // Ancho para la columna de valores
          ];
          
          // Añadir la hoja al libro
          XLSX.utils.book_append_sheet(wb, ws, 'Transacción');
          
          // Generar el archivo Excel
          XLSX.writeFile(wb, `transaccion_${transaccion.id || 'nueva'}.xlsx`);
          
        } catch (error) {
          console.error('Error al exportar a Excel:', error);
          alert('Error al exportar a Excel: ' + (error instanceof Error ? error.message : 'Error desconocido'));
        }
      }
      
      // Filtrar categorías según el tipo de transacción
      function filtrarCategorias() {
        const tipo = tipoSelect.value;
        const categorias = Array.from(categoriaSelect.options);
        
        // Mostrar/ocultar opciones según el tipo
        categorias.forEach(option => {
          if (option.value === '') return; // No ocultar la opción por defecto
          
          const categoriaTipo = option.getAttribute('data-tipo');
          if (categoriaTipo === tipo || categoriaTipo === 'ambos') {
            option.style.display = '';
          } else {
            option.style.display = 'none';
            // Si la opción seleccionada se oculta, seleccionar la opción por defecto
            if (option.selected) {
              categoriaSelect.value = '';
            }
          }
        });
      }
      
      // Inicializar filtrado de categorías
      filtrarCategorias();
      
      // Escuchar cambios en el tipo de transacción
      tipoSelect.addEventListener('change', filtrarCategorias);
    });
  </script>

  <style>
    /* Estilos personalizados */
    #persona_resultados {
      max-height: 200px;
      overflow-y: auto;
      border: 1px solid #e5e7eb;
      border-radius: 0.375rem;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
      z-index: 50;
    }
    
    #persona_resultados div {
      padding: 0.5rem 0.75rem;
      cursor: pointer;
      transition: background-color 150ms ease-in-out;
    }
    
    #persona_resultados div:hover {
      background-color: #f3f4f6;
    }
    
    #persona_resultados div:not(:last-child) {
      border-bottom: 1px solid #f3f4f6;
    }
    
    /* Estilo para el input de búsqueda cuando hay resultados */
    #persona_buscar:focus + #persona_resultados {
      display: block;
    }
    
    /* Mejoras de accesibilidad para el foco */
    input:focus, select:focus, textarea:focus, button:focus {
      outline: 2px solid #3b82f6;
      outline-offset: 2px;
    }
    
    /* Transiciones suaves */
    input, select, textarea, button {
      transition: all 150ms ease-in-out;
    }
  </style>
</LayoutProtected>