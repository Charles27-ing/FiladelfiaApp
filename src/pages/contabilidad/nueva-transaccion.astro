---
import LayoutProtected from '@layouts/LayoutProtected.astro';
import Layout from '../../layouts/Layout.astro';
import Preloader from '@components/Preloader.astro';

// Definici√≥n de tipos
interface Categoria {
  id: string;
  nombre: string;
  tipo: string;
}

interface Actividad {
  id: string;
  nombre: string;
}

interface Persona {
  id: string;
  nombre_completo: string;
  documento_identidad?: string;
}

// Obtener la URL base
const baseUrl = Astro.url.origin;

// Estado inicial
let categorias: Categoria[] = [];
let actividades: Actividad[] = [];
let error: string | null = null;

// Cargar categor√≠as y actividades para los dropdowns
try {
  console.log('Solicitando categor√≠as a:', `${baseUrl}/api/contabilidad/categorias`);
  const [categoriasRes, actividadesRes] = await Promise.all([
    fetch(`${baseUrl}/api/contabilidad/categorias`),
    fetch(`${baseUrl}/api/contabilidad/actividades`)
  ]);
  
  if (categoriasRes.ok) {
    const categoriasData = await categoriasRes.json();
    //console.log('Respuesta de categor√≠as:', categoriasData);
    categorias = categoriasData;
  } else {
    const errorText = await categoriasRes.text();
    console.error('Error cargando categor√≠as:', errorText);
    error = 'No se pudieron cargar las categor√≠as';
  }
  
  if (actividadesRes.ok) {
    actividades = await actividadesRes.json();
  } else {
    console.error('Error cargando actividades:', await actividadesRes.text());
  }
} catch (err) {
  const errorObj = err as Error;
  console.error('Error en la carga de datos:', errorObj);
  error = 'Error al cargar los datos necesarios';
}

// Obtener mensajes de URL (success/error)
const url = new URL(Astro.request.url);
const successMessage = url.searchParams.get('success');
const errorMessage = url.searchParams.get('error');
const actividadIdParam = url.searchParams.get('actividad_id');
---

<LayoutProtected title="Registrar Nueva Transacci√≥n">
   <div class="bg-white rounded-2xl shadow-xl border border-gray-100 overflow-hidden">
        <div class="bg-gradient-to-r from-green-600 to-green-700 px-8 py-6">
          <h2 class="text-2xl font-bold text-white flex items-center">
            <svg class="w-6 h-6 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
            </svg>
            Registrar Nuevo Movimiento
          </h2>
          
        </div>
  <div class="max-w-5xl mx-auto p-6 bg-white rounded-xl shadow-md">
    <div class="flex justify-between items-center mb-6">
      <p class="text-gray-600 font-semibold mt-1">Complete todos los campos requeridos para registrar la transacci√≥n</p>
      <a href="/contabilidad/transacciones" class="group inline-flex items-center px-4 py-2 text-gray-600 hover:text-green-600 transition-all duration-300 hover:bg-white hover:shadow-md rounded-lg">
        <svg class="w-5 h-5 mr-2 transform group-hover:-translate-x-1 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
        </svg>
        <span class="font-medium">Volver al listado</span>
      </a>
    </div>

    <!-- Mensajes de √©xito/error -->
    {successMessage && (
      <div class="bg-green-50 border-l-4 border-green-500 text-green-700 p-4 mb-6 rounded">
        <div class="flex">
          <div class="flex-shrink-0">
            <svg class="h-5 w-5 text-green-500" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
            </svg>
          </div>
          <div class="ml-3">
            <p class="text-sm font-medium">{successMessage}</p>
          </div>
        </div>
      </div>
    )}
    
    {errorMessage && (
      <div class="bg-red-50 border-l-4 border-red-500 text-red-700 p-4 mb-6 rounded">
        <div class="flex">
          <div class="flex-shrink-0">
            <svg class="h-5 w-5 text-red-500" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 0L6 8.586 4.707 7.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
            </svg>
          </div>
          <div class="ml-3">
            <p class="text-sm font-medium">{errorMessage}</p>
          </div>
        </div>
      </div>
    )}

    <form id="transaccion-form" method="POST" action="/api/contabilidad/transacciones" class="space-y-6">
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <!-- Columna Izquierda -->
        <div class="space-y-6">

          <!-- Fecha y Tipo -->
          <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <div>
              <label for="fecha" class="block text-sm font-medium text-gray-700 mb-2">
                <span class="flex items-center">
                  <svg class="w-3 h-2 mr-2 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  Fecha *
                </span>
              </label>
              <input 
                type="date" 
                id="fecha" 
                name="fecha" 
                required 
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-all duration-200 ease-in-out bg-white shadow-sm"
              />
            </div>
            <div>
              <label for="tipo" class="block text-sm font-medium text-gray-700 mb-2">
                <span class="flex items-center">
                  <svg class="w-4 h-4 mr-2 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
                  </svg>
                  Tipo *
                </span>
              </label>
              <div class="relative">
                <select 
                  id="tipo" 
                  name="tipo" 
                  required 
                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-all duration-200 ease-in-out bg-white shadow-sm appearance-none"
                >
                  <option value="ingreso">üìà Ingreso</option>
                  <option value="egreso">üìâ Egreso</option>
                </select>
                <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
                  <svg class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                  </svg>
                </div>
              </div>
            </div>
          </div>
          <!-- B√∫squeda de persona -->
          <div class="relative">
            <label for="persona_buscar" class="block text-sm font-medium text-gray-700 mb-2">
              <span class="flex items-center">
                <svg class="w-4 h-4 mr-2 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                </svg>
                Buscar Persona
              </span>
            </label>
            <div class="relative">
              <input 
                type="text" 
                id="persona_buscar" 
                name="persona_buscar" 
                placeholder="Nombre o documento..." 
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-all duration-200 ease-in-out bg-white shadow-sm"
                autocomplete="off"
              />
              <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                <svg class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
              </div>
            </div>
            <input type="hidden" id="persona_id" name="persona_id" value="" />
            <div id="persona_resultados" class="hidden absolute z-10 w-full mt-1 bg-white border border-gray-200 rounded-lg shadow-lg max-h-60 overflow-auto"></div>
            <div id="persona_seleccionada" class="mt-2 p-3 bg-green-50 rounded-lg border border-green-200 hidden"></div>
          </div>

          

          <!-- Monto -->
          <div>
            <label for="monto" class="block text-sm font-medium text-gray-700 mb-2">
                  <span class="flex items-center">
                    <svg class="w-4 h-4 mr-2 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1" />
                    </svg>
                    Monto *
                  </span>
                </label>
            <div class="relative rounded-md shadow-sm">
              <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <span class="text-gray-500 sm:text-sm">$</span>
              </div>
              <input 
                type="number" 
                id="monto" 
                name="monto" 
                step="0.01" 
                min="0.01" 
                required 
                class="focus:ring-blue-500 focus:border-blue-500 block w-full pl-7 pr-12 sm:text-sm border-gray-300 rounded-md py-2 border"
                placeholder="0.00"
              />
              <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                <span class="text-gray-500 sm:text-sm">COP</span>
              </div>
            </div>
            <div id="monto-preview" class="mt-1 text-sm text-gray-600"></div>
          </div>
        </div>

        <!-- Columna Derecha -->
        <div class="space-y-4">
          <!-- Categor√≠a -->
           
          <div>
            <label for="categoria_id" class="block text-sm font-medium text-gray-700 mb-2">
              <span class="flex items-center">
                <svg class="w-4 h-4 mr-2 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                </svg>
                Categor√≠a *
              </span>
            <select 
              id="categoria_id" 
              name="categoria_id" 
              required 
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm bg-white"
            >
              <option value="">Seleccione una categor√≠a</option>
              {categorias.map((cat: Categoria) => (
                <option value={cat.id} data-tipo={cat.tipo}>
                  {cat.nombre} ({cat.tipo === 'ingreso' ? 'Ingreso' : 'Egreso'})
                </option>
              ))}
            </select>
          </div>

          <!-- Actividad -->
          <div>
            <label for="actividad_id" class="block text-sm font-medium text-gray-700 mb-2">
              <span class="flex items-center">
                <svg class="w-4 h-4 mr-2 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                </svg>
                Actividad (opcional)
              </span>
            </label>
            <select 
              id="actividad_id" 
              name="actividad_id" 
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm bg-white"
            >
              <option value="">Ninguna</option>
              {actividades.map((act: Actividad) => (
                <option value={act.id}>{act.nombre}</option>
              ))}
            </select>
          </div>

          <!-- Descripci√≥n -->
          <div>
            <label for="descripcion" class="block text-sm font-medium text-gray-700 mb-2">
              <span class="flex items-center">
                <svg class="w-4 h-4 mr-2 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h7" />
                </svg>
                Descripci√≥n
              </span>
            </label>
            <textarea 
              id="descripcion" 
              name="descripcion" 
              rows="3"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm"
              placeholder="Detalles de la transacci√≥n..."
            ></textarea>
          </div>

          <!-- Evidencia -->
          <div>
            <label for="evidencia" class="block text-sm font-medium text-gray-700 mb-2">
              <span class="flex items-center">
                <svg class="w-4 h-4 mr-2 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                </svg>
                URL de evidencia (opcional)
              </span>
            </label>
            <div class="mt-1 flex rounded-md shadow-sm">
              <span class="inline-flex items-center px-3 rounded-l-md border border-r-0 border-gray-300 bg-gray-50 text-gray-500 text-sm">
                https://
              </span>
              <input 
                type="text" 
                id="evidencia" 
                name="evidencia" 
                class="focus:ring-blue-500 focus:border-blue-500 flex-1 block w-full rounded-none rounded-r-md sm:text-sm border-gray-300 py-2 px-3 border"
                placeholder="ejemplo.com/recibo"
              />
            </div>
          </div>
        </div>
      </div>

      <!-- Bot√≥n de env√≠o -->
      <div class="pt-4 border-t border-gray-200">
        <button 
          type="submit" 
          class="w-full md:w-auto flex justify-center items-center px-6 py-2.5 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-colors"
        >
          <svg class="-ml-1 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
          </svg>
          Registrar Transacci√≥n
        </button>
      </div>
    </form>
  </div>

  <script>
    import jsPDF from 'jspdf';
    import 'jspdf-autotable';
    import * as XLSX from 'xlsx';
    
    document.addEventListener('DOMContentLoaded', async () => {
      
      const form = document.getElementById('transaccion-form') as HTMLFormElement;
      const tipoSelect = document.getElementById('tipo') as HTMLSelectElement;
      const categoriaSelect = document.getElementById('categoria_id') as HTMLSelectElement;
      const actividadSelect = document.getElementById('actividad_id') as HTMLSelectElement;
      const personaBuscar = document.getElementById('persona_buscar') as HTMLInputElement;
      const personaId = document.getElementById('persona_id') as HTMLInputElement;
      const resultadosDiv = document.getElementById('persona_resultados') as HTMLDivElement;
      const montoInput = document.getElementById('monto') as HTMLInputElement;
      const montoPreview = document.getElementById('monto-preview') as HTMLDivElement;
      
      if (!form || !tipoSelect || !categoriaSelect || !actividadSelect || !personaBuscar || !personaId || !resultadosDiv) {
        console.error('No se encontraron todos los elementos necesarios');
        return;
      }

      // Funci√≥n para formatear moneda
      function formatCurrency(amount: number): string {
        return new Intl.NumberFormat('es-CO', { 
          style: 'currency', 
          currency: 'COP',
          minimumFractionDigits: 0,
          maximumFractionDigits: 0
        }).format(amount);
      }

      // Funci√≥n para formatear fecha
      function formatDate(dateString: string): string {
        const options: Intl.DateTimeFormatOptions = { 
          year: 'numeric', 
          month: 'long', 
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        };
        return new Date(dateString).toLocaleDateString('es-CO', options);
      }

      // Manejar b√∫squeda de personas
      let searchTimeout: number | null = null;
      
      personaBuscar.addEventListener('input', (e) => {
        const query = (e.target as HTMLInputElement).value.trim();
        
        if (searchTimeout) {
          clearTimeout(searchTimeout);
        }
        
        if (query.length < 2) {
          resultadosDiv.innerHTML = '';
          resultadosDiv.classList.add('hidden');
          return;
        }
        
        searchTimeout = window.setTimeout(async () => {
          try {
            const response = await fetch(`/api/personas/buscar?q=${encodeURIComponent(query)}`);
            if (!response.ok) throw new Error('Error en la b√∫squeda');
            
            const personas = await response.json();
            
            if (personas.length === 0) {
              resultadosDiv.innerHTML = '<div class="p-2 text-gray-500">No se encontraron resultados</div>';
              resultadosDiv.classList.remove('hidden');
              return;
            }
            
            resultadosDiv.innerHTML = personas.map((persona: any) => `
              <div class="p-2 hover:bg-gray-100 cursor-pointer" data-id="${persona.id}">
                ${persona.nombre_completo}${persona.documento_identidad ? ` (${persona.documento_identidad})` : ''}
              </div>
            `).join('');
            
            resultadosDiv.classList.remove('hidden');
            
            // Agregar manejadores de clic a los resultados
            resultadosDiv.querySelectorAll('div[data-id]').forEach(div => {
              div.addEventListener('click', () => {
                const id = div.getAttribute('data-id');
                const nombre = div.textContent?.trim().split(' (')[0] || '';
                personaId.value = id || '';
                personaBuscar.value = nombre;
                resultadosDiv.classList.add('hidden');
              });
            });
            
          } catch (error) {
            console.error('Error buscando personas:', error);
            resultadosDiv.innerHTML = '<div class="p-2 text-red-500">Error al buscar personas</div>';
            resultadosDiv.classList.remove('hidden');
          }
        }, 300);
      });
      
      // Ocultar resultados al hacer clic fuera
      document.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        if (target !== personaBuscar && !resultadosDiv.contains(target)) {
          resultadosDiv.classList.add('hidden');
        }
      });

      // Formateo de monto con vista previa (como meta en Editar Actividad)
      if (montoInput && montoPreview) {
        montoInput.addEventListener('input', function() {
          const value = parseFloat(this.value) || 0;
          if (value > 0) {
            montoPreview.textContent = `Vista previa: ${formatCurrency(value)}`;
            montoPreview.className = 'mt-1 text-sm text-green-600';
          } else if (value < 0) {
            montoPreview.textContent = 'El monto debe ser un valor positivo';
            montoPreview.className = 'mt-1 text-sm text-red-600';
            this.value = '0';
          } else {
            montoPreview.textContent = '';
            montoPreview.className = 'mt-1 text-sm text-gray-600';
          }
        });
      }

      // Manejar env√≠o del formulario con Preloader global
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
        if (!submitButton) return;
        
        const originalButtonText = submitButton.innerHTML;
        try {
          // Mostrar preloader global
          if (window && (window as any).showPreloader) {
            (window as any).showPreloader('Registrando transacci√≥n...');
          }
          submitButton.disabled = true;
          submitButton.innerHTML = 'Procesando...';
          
          const formData = new FormData(form);
          const response = await fetch(form.action, {
            method: 'POST',
            body: formData,
            headers: { 'Accept': 'application/json' }
          });
          
          const result = await response.json();
          
          if (!response.ok) {
            throw new Error(result.error || 'Error al guardar la transacci√≥n');
          }
          // Mostrar √©xito con preloader y redirigir
          if (window && (window as any).showPreloaderSuccess) {
            (window as any).showPreloaderSuccess('¬°Transacci√≥n guardada con √©xito!');
          }
          setTimeout(() => {
            window.location.href = '/contabilidad/transacciones';
          }, 1500);

          // Limpiar el formulario
          (form as HTMLFormElement).reset();
          
        } catch (error) {
          console.error('Error al enviar el formulario:', error);
          if (window && (window as any).hidePreloader) {
            (window as any).hidePreloader();
          }
          alert(error instanceof Error ? error.message : 'Error al procesar la transacci√≥n');
          
        } finally {
          // Restaurar el bot√≥n
          if (submitButton) {
            submitButton.disabled = false;
            submitButton.innerHTML = originalButtonText;
          }
        }
      });
      
      // Funci√≥n para generar PDF usando el m√≥dulo reutilizable
      async function generatePDF(transaccion: any) {
        try {
          // Generar PDF directamente
          const doc = new jsPDF();
          
          // Configuraci√≥n del documento
          doc.setFont('helvetica');
          doc.setFontSize(20);
          doc.setTextColor(30, 64, 175);
          
          // T√≠tulo
          doc.text('COMPROBANTE DE TRANSACCI√ìN', 105, 20, { align: 'center' });
          
          // L√≠nea decorativa
          doc.setDrawColor(30, 64, 175);
          doc.setLineWidth(0.5);
          doc.line(20, 25, 190, 25);
          
          // Informaci√≥n de la transacci√≥n
          let y = 40;
          doc.setFontSize(12);
          doc.setTextColor(0, 0, 0);
          
          // Funci√≥n para agregar filas
          const addRow = (label: string, value: string, isBold = false) => {
            doc.setFont(undefined, 'bold');
            doc.text(String(label), 20, y);
            doc.setFont(undefined, isBold ? 'bold' : 'normal');
            doc.text(String(value), 80, y);
            y += 7;
          };
          
          // Datos de la transacci√≥n
          addRow('N√∫mero de Transacci√≥n:', `#${String(transaccion.numero_transaccion || transaccion.id)}`, true);
          addRow('Fecha y Hora:', String(new Date(transaccion.fecha).toLocaleString('es-CO')));
          addRow('Tipo:', String(transaccion.tipo === 'ingreso' ? 'Ingreso' : 'Egreso'));
          addRow('Monto:', new Intl.NumberFormat('es-CO', { 
            style: 'currency', 
            currency: 'COP',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
          }).format(Number(transaccion.monto)), true);
          addRow('Categor√≠a:', String(transaccion.categoria_nombre || 'N/A'));
          if (transaccion.actividad_nombre) addRow('Actividad:', String(transaccion.actividad_nombre));
          if (transaccion.persona_nombre) addRow('Persona:', String(transaccion.persona_nombre));
          addRow('Estado:', String(transaccion.estado === 'anulada' ? 'Anulada' : 'Activa'));
          
          if (transaccion.descripcion) {
            y += 5;
            doc.setFont(undefined, 'bold');
            doc.text('Descripci√≥n:', 20, y);
            y += 7;
            doc.setFont(undefined, 'normal');
            const splitDesc = doc.splitTextToSize(String(transaccion.descripcion), 170) as unknown as string[];
            doc.text(splitDesc as string[], 20, y);
          }
          
          // Pie de p√°gina
          const pageCount = (doc as any).internal.getNumberOfPages();
          for (let i = 1; i <= pageCount; i++) {
            doc.setPage(i);
            doc.setFontSize(10);
            doc.setTextColor(100, 100, 100);
            doc.text(
              `P√°gina ${i} de ${pageCount}`,
              (doc as any).internal.pageSize.width - 20,
              (doc as any).internal.pageSize.height - 10,
              { align: 'right' }
            );
            doc.text(
              new Date().toLocaleString('es-CO'),
              20,
              (doc as any).internal.pageSize.height - 10
            );
          }
          
          // Guardar el documento
          const filename = `transaccion_${transaccion.numero_transaccion || transaccion.id}.pdf`;
          doc.save(filename);
        } catch (error) {
          console.error('Error al generar el PDF:', error);
          alert('Error al generar el PDF: ' + (error instanceof Error ? error.message : 'Error desconocido'));
        }
      }
      
      // Funci√≥n para exportar a Excel usando el m√≥dulo reutilizable
      async function exportToExcel(transaccion: any) {
        try {
          // Generar Excel directamente
          const wsData = [
            ['Campo', 'Valor'],
            ['N√∫mero de Transacci√≥n', transaccion.numero_transaccion || transaccion.id],
            ['Fecha', new Date(transaccion.fecha).toLocaleString('es-CO')],
            ['Tipo', transaccion.tipo === 'ingreso' ? 'Ingreso' : 'Egreso'],
            ['Monto', transaccion.monto],
            ['Categor√≠a', transaccion.categoria_nombre || 'N/A'],
            ['Actividad', transaccion.actividad_nombre || 'N/A'],
            ['Persona', transaccion.persona_nombre || 'N/A'],
            ['Estado', transaccion.estado === 'anulada' ? 'Anulada' : 'Activa'],
            ['Descripci√≥n', transaccion.descripcion || '']
          ];
          
          const wb = XLSX.utils.book_new();
          const ws = XLSX.utils.aoa_to_sheet(wsData);
          
          // Ajustar ancho de columnas
          ws['!cols'] = [
            { wch: 20 },
            { wch: 30 }
          ];
          
          XLSX.utils.book_append_sheet(wb, ws, 'Transacci√≥n');
          
          const filename = `transaccion_${transaccion.numero_transaccion || transaccion.id}.xlsx`;
          XLSX.writeFile(wb, filename);
        } catch (error) {
          console.error('Error al exportar a Excel:', error);
          alert('Error al exportar a Excel: ' + (error instanceof Error ? error.message : 'Error desconocido'));
        }
      }
      
      // Filtrar categor√≠as seg√∫n el tipo de transacci√≥n
      function filtrarCategorias() {
        const tipo = tipoSelect.value;
        const categorias = Array.from(categoriaSelect.options);
        
        // Mostrar/ocultar opciones seg√∫n el tipo
        categorias.forEach(option => {
          if (option.value === '') return; // No ocultar la opci√≥n por defecto
          
          const categoriaTipo = option.getAttribute('data-tipo');
          if (categoriaTipo === tipo || categoriaTipo === 'ambos') {
            option.style.display = '';
          } else {
            option.style.display = 'none';
            // Si la opci√≥n seleccionada se oculta, seleccionar la opci√≥n por defecto
            if (option.selected) {
              categoriaSelect.value = '';
            }
          }
        });
      }
      
      // Inicializar filtrado de categor√≠as
      filtrarCategorias();

      // Escuchar cambios en el tipo de transacci√≥n
      tipoSelect.addEventListener('change', filtrarCategorias);

      // Pre-seleccionar actividad si viene en la URL
      const urlParams = new URLSearchParams(window.location.search);
      const actividadIdFromUrl = urlParams.get('actividad_id');
      if (actividadIdFromUrl && actividadSelect) {
        actividadSelect.value = actividadIdFromUrl;
      }
    });
  </script>

  <style>
    /* Estilos personalizados */
    #persona_resultados {
      max-height: 200px;
      overflow-y: auto;
      border: 1px solid #e5e7eb;
      border-radius: 0.375rem;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
      z-index: 50;
    }
    
    #persona_resultados div {
      padding: 0.5rem 0.75rem;
      cursor: pointer;
      transition: background-color 150ms ease-in-out;
    }
    
    #persona_resultados div:hover {
      background-color: #f3f4f6;
    }
    
    #persona_resultados div:not(:last-child) {
      border-bottom: 1px solid #f3f4f6;
    }
    
    /* Estilo para el input de b√∫squeda cuando hay resultados */
    #persona_buscar:focus + #persona_resultados {
      display: block;
    }
    
    /* Mejoras de accesibilidad para el foco */
    input:focus, select:focus, textarea:focus, button:focus {
      outline: 2px solid #3b82f6;
      outline-offset: 2px;
    }
    
    /* Transiciones suaves */
    input, select, textarea, button {
      transition: all 150ms ease-in-out;
    }
  </style>
  <Preloader />
</LayoutProtected>