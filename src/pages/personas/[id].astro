---
// src/pages/personas/[id].astro - Página de detalles de persona
import LayoutProtected from "@/layouts/LayoutProtected.astro";
import { supabase } from "@/lib/supabase";

// Obtener el ID de la persona desde la URL
const { id } = Astro.params;

if (!id) {
  return Astro.redirect('/personas?error=' + encodeURIComponent('ID de persona no válido'));
}

// Definir interfaces
interface Sede {
  id: string;
  nombre_sede: string;
  codigo: string;
}

interface Escala {
  id: string;
  nombre_escala: string;
}

interface Persona {
  id: string;
  nombres: string;
  primer_apellido: string;
  segundo_apellido: string;
  numero_id: string;
  tipo_id: string;
  email: string;
  telefono: string;
  direccion: string;
  genero: string;
  fecha_nacimiento: string;
  edad: number;
  url_foto: string | null;
  created_at: string;
  sedes: Sede | null;
  persona_escala: { escala_de_crecimiento: Escala }[];
}

// Consultar los datos de la persona específica
const { data: personaData, error } = await supabase
  .from("persona")
  .select(`
    id,
    nombres,
    primer_apellido,
    segundo_apellido,
    numero_id,
    tipo_id,
    email,
    telefono,
    direccion,
    genero,
    fecha_nacimiento,
    edad,
    url_foto,
    created_at,
    sedes(id, nombre_sede, codigo),
    persona_escala(
      escala_de_crecimiento(id, nombre_escala)
    )
  `)
  .eq('id', id)
  .single();

if (error || !personaData) {
  console.error("Error al cargar persona:", error);
  return Astro.redirect('/personas?error=' + encodeURIComponent('Persona no encontrada'));
}

const persona = personaData as Persona;

// Procesar las escalas
const escalas = persona.persona_escala
  ?.map(pe => pe.escala_de_crecimiento)
  .filter((escala): escala is Escala => escala !== null) || [];

// Formatear la fecha de nacimiento
const fechaNacimiento = persona.fecha_nacimiento 
  ? new Date(persona.fecha_nacimiento).toLocaleDateString('es-ES', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    })
  : 'No especificada';

// Formatear la fecha de registro
const fechaRegistro = new Date(persona.created_at).toLocaleDateString('es-ES', {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
  hour: '2-digit',
  minute: '2-digit'
});
---

<LayoutProtected title={`${persona.nombres} ${persona.primer_apellido}`}>
  <!-- ====================================================== -->
  <!-- HEADER CON NAVEGACIÓN -->
  <!-- ====================================================== -->
  <div class="mb-6">
    <nav class="flex" aria-label="Breadcrumb">
      <ol class="inline-flex items-center space-x-1 md:space-x-3">
        <li class="inline-flex items-center">
          <a href="/personas" class="inline-flex items-center text-sm font-medium text-gray-700 hover:text-green-600">
            <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"/>
            </svg>
            Directorio de Personas
          </a>
        </li>
        <li>
          <div class="flex items-center">
            <svg class="w-6 h-6 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"/>
            </svg>
            <span class="ml-1 text-sm font-medium text-gray-500 md:ml-2">
              {persona.nombres} {persona.primer_apellido}
            </span>
          </div>
        </li>
      </ol>
    </nav>
  </div>

  <!-- ====================================================== -->
  <!-- TARJETA PRINCIPAL DE LA PERSONA -->
  <!-- ====================================================== -->
  <div class="bg-white shadow-lg rounded-lg overflow-hidden">
    <!-- Header de la tarjeta -->
    <div class="bg-gradient-to-r from-green-500 to-green-600 px-6 py-8">
      <div class="flex items-center space-x-6">
        <!-- Foto de perfil -->
        <div class="flex-shrink-0">
          {persona.url_foto ? (
            <img 
              class="h-24 w-24 rounded-full border-4 border-white shadow-lg object-cover" 
              src={persona.url_foto} 
              alt={`Foto de ${persona.nombres}`} 
            />
          ) : (
            <div class="h-24 w-24 rounded-full border-4 border-white shadow-lg bg-gray-200 flex items-center justify-center">
              <svg class="h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
              </svg>
            </div>
          )}
        </div>
        
        <!-- Información básica -->
        <div class="flex-1">
          <h1 class="text-3xl font-bold text-white">
            {persona.nombres} {persona.primer_apellido} {persona.segundo_apellido}
          </h1>
          <p class="text-green-100 text-lg mt-1">
            {persona.tipo_id}: {persona.numero_id}
          </p>
          <div class="flex flex-wrap gap-2 mt-3">
            {persona.sedes ? (
              <span class="px-3 py-1 bg-white bg-opacity-20 text-white text-sm font-medium rounded-full">
                📍 {persona.sedes.nombre_sede}
              </span>
            ) : (
              <span class="px-3 py-1 bg-white bg-opacity-20 text-white text-sm font-medium rounded-full">
                📍 Sin Sede Asignada
              </span>
            )}
            
            {escalas.length > 0 ? (
              escalas.map((escala) => (
                <span class="px-3 py-1 bg-white bg-opacity-20 text-white text-sm font-medium rounded-full">
                  📈 {escala.nombre_escala}
                </span>
              ))
            ) : (
              <span class="px-3 py-1 bg-white bg-opacity-20 text-white text-sm font-medium rounded-full">
                📈 Sin Escalas Asignadas
              </span>
            )}
          </div>
        </div>
      </div>
    </div>

    <!-- Contenido de la tarjeta -->
    <div class="px-6 py-6">
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <!-- Información Personal -->
        <div>
          <h2 class="text-xl font-semibold text-gray-900 mb-4 flex items-center">
            <svg class="w-5 h-5 mr-2 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
            </svg>
            Información Personal
          </h2>
          
          <div class="space-y-4">
            <div class="flex justify-between py-2 border-b border-gray-100">
              <span class="font-medium text-gray-600">Género:</span>
              <span class="text-gray-900">{persona.genero || 'No especificado'}</span>
            </div>
            
            <div class="flex justify-between py-2 border-b border-gray-100">
              <span class="font-medium text-gray-600">Fecha de Nacimiento:</span>
              <span class="text-gray-900">{fechaNacimiento}</span>
            </div>
            
            <div class="flex justify-between py-2 border-b border-gray-100">
              <span class="font-medium text-gray-600">Edad:</span>
              <span class="text-gray-900">{persona.edad} años</span>
            </div>
            
            <div class="flex justify-between py-2 border-b border-gray-100">
              <span class="font-medium text-gray-600">Fecha de Registro:</span>
              <span class="text-gray-900">{fechaRegistro}</span>
            </div>
          </div>
        </div>

        <!-- Información de Contacto -->
        <div>
          <h2 class="text-xl font-semibold text-gray-900 mb-4 flex items-center">
            <svg class="w-5 h-5 mr-2 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
            </svg>
            Información de Contacto
          </h2>
          
          <div class="space-y-4">
            <div class="flex justify-between py-2 border-b border-gray-100">
              <span class="font-medium text-gray-600">Email:</span>
              <a href={`mailto:${persona.email}`} class="text-green-600 hover:text-green-800">
                {persona.email}
              </a>
            </div>
            
            <div class="flex justify-between py-2 border-b border-gray-100">
              <span class="font-medium text-gray-600">Teléfono:</span>
              <a href={`tel:${persona.telefono}`} class="text-green-600 hover:text-green-800">
                {persona.telefono}
              </a>
            </div>
            
            <div class="py-2 border-b border-gray-100">
              <span class="font-medium text-gray-600 block mb-1">Dirección:</span>
              <span class="text-gray-900">{persona.direccion || 'No especificada'}</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Escalas de Crecimiento (si hay más de una) -->
      {escalas.length > 1 && (
        <div class="mt-8">
          <h2 class="text-xl font-semibold text-gray-900 mb-4 flex items-center">
            <svg class="w-5 h-5 mr-2 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"/>
            </svg>
            Escalas de Crecimiento
          </h2>
          
          <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3">
            {escalas.map((escala) => (
              <div class="bg-purple-50 border border-purple-200 rounded-lg p-4 text-center">
                <div class="text-purple-600 font-semibold">{escala.nombre_escala}</div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>

    <!-- Footer con acciones -->
    <div class="bg-gray-50 px-6 py-4 flex justify-between items-center">
      <a
        href="/personas"
        class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
      >
        <svg class="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"/>
        </svg>
        Volver al Directorio
      </a>
      
      <div class="flex space-x-3">
        <a
          href={`/personas/${persona.id}/editar`}
          class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        >
          <svg class="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
          </svg>
          Editar Persona
        </a>
        
        <button
          type="button"
          onclick={`deletePerson('${persona.id}', '${persona.nombres} ${persona.primer_apellido}')`}
          class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
        >
          <svg class="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
          </svg>
          Eliminar
        </button>
      </div>
    </div>
  </div>

  <!-- ====================================================== -->
  <!-- MODAL DE CONFIRMACIÓN DE ELIMINACIÓN -->
  <!-- ====================================================== -->
  <div
    id="delete-modal"
    class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden flex items-center justify-center z-50"
  >
    <div class="bg-white p-8 rounded-lg shadow-xl max-w-sm mx-auto">
      <div class="flex items-center justify-center w-12 h-12 mx-auto bg-red-100 rounded-full mb-4">
        <svg class="w-6 h-6 text-red-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"/>
        </svg>
      </div>
      <h3 class="text-lg font-bold text-gray-900 mb-4 text-center">Confirmar Eliminación</h3>
      <p class="text-sm text-gray-600 mb-6 text-center">
        ¿Estás seguro de que deseas eliminar a <span id="delete-person-name" class="font-semibold"></span>? Esta acción no se puede deshacer.
      </p>
      <div class="flex justify-center gap-3">
        <button
          id="cancel-delete"
          class="px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-opacity-50"
        >
          Cancelar
        </button>
        <button
          id="confirm-delete"
          class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
        >
          Eliminar
        </button>
      </div>
    </div>
  </div>

  <!-- ====================================================== -->
  <!-- SCRIPTS PARA FUNCIONALIDAD DE ELIMINACIÓN -->
  <!-- ====================================================== -->
  <script is:inline define:vars={{ personaId: persona.id }}>
    let personToDelete = null;

    // Función para eliminar persona (debe estar en el ámbito global)
    window.deletePerson = function(personId, personName) {
      personToDelete = personId;
      document.getElementById('delete-person-name').textContent = personName;
      document.getElementById('delete-modal').classList.remove('hidden');
    };

    function confirmDeletePerson() {
      if (personToDelete) {
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = `/api/personas/${personToDelete}/delete`;
        
        const csrfInput = document.createElement('input');
        csrfInput.type = 'hidden';
        csrfInput.name = '_method';
        csrfInput.value = 'DELETE';
        form.appendChild(csrfInput);
        
        document.body.appendChild(form);
        form.submit();
      }
    }

    function closeDeleteModal() {
      document.getElementById('delete-modal').classList.add('hidden');
      personToDelete = null;
    }

    // Inicializar cuando el DOM esté listo
    document.addEventListener('DOMContentLoaded', function() {
      const confirmDelete = document.getElementById('confirm-delete');
      const cancelDelete = document.getElementById('cancel-delete');
      const deleteModal = document.getElementById('delete-modal');

      if (confirmDelete) {
        confirmDelete.addEventListener('click', confirmDeletePerson);
      }
      
      if (cancelDelete) {
        cancelDelete.addEventListener('click', closeDeleteModal);
      }
      
      if (deleteModal) {
        deleteModal.addEventListener('click', function(e) {
          if (e.target === deleteModal) {
            closeDeleteModal();
          }
        });
      }

      // Manejar tecla Escape
      document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
          closeDeleteModal();
        }
      });
    });
  </script>
</LayoutProtected>

