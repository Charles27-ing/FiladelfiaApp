---
// src/pages/personas/index.astro - VERSIÓN CORREGIDA Y ROBUSTA
import LayoutProtected from "@layouts/LayoutProtected.astro";
import { supabase } from "@lib/supabase";

// Definir interfaces para los tipos de datos
interface Sede {
  id: string;
  nombre_sede: string;
  codigo: string;
}

interface Escala {
  id: string;
  nombre_escala: string;
 }

interface Persona {
  id: string;
  nombres: string;
  primer_apellido: string;
  segundo_apellido: string;
  numero_id: string;
  tipo_id: string;
  email: string;
  telefono: string;
  url_foto: string | null;
  sedes: Sede | null; // Puede ser null si no hay sede o el join falla
  persona_escala: { escala_de_crecimiento: Escala }[]; // Array de objetos con la escala anidada
  // Añade aquí cualquier otra propiedad de tu tabla persona
}

// CONSULTA: Usar left joins para incluir personas sin escalas
const { data, error } = await supabase
  .from("persona")
  .select(`
    id,
    nombres,
    primer_apellido,
    segundo_apellido,
    numero_id,
    tipo_id,
    email,
    telefono,
    url_foto,
    sedes(id, nombre_sede, codigo),
    persona_escala(
      escala_de_crecimiento(id, nombre_escala)
    )
  `)
  .order("created_at", { ascending: false });

// Asegurarse de que `data` es un array de Persona o un array vacío
const personas: Persona[] = (data as Persona[] | null) || [];

if (error) {
  console.error("Error al cargar personas:", error);
  console.error("Detalles del error:", error.message, error.details, error.hint);
}

// Debug: Mostrar cuántas personas se cargaron
console.log(`[DEBUG] Personas cargadas: ${personas.length}`);
if (personas.length > 0) {
  console.log("[DEBUG] Primera persona:", personas[0]);
}

// Procesar los datos para agrupar las escalas por persona
const personasConEscalas = personas.map(persona => ({
  ...persona,
  escalas: persona.persona_escala
    ?.map(pe => pe.escala_de_crecimiento)
    .filter((escala): escala is Escala => escala !== null) || [] // Asegurar que escala no es null
})) || [];

console.log(`[DEBUG] Personas procesadas: ${personasConEscalas.length}`);

// Obtener mensajes de éxito/error de la URL
const successMessage = Astro.url.searchParams.get("success");
const errorMessage = Astro.url.searchParams.get("error");
---


<LayoutProtected title="Gestión de Personas">
  <!-- ====================================================== -->
  <!-- NOTIFICACIONES -->
  <!-- ====================================================== -->
  {successMessage && (
    <div class="mb-6 rounded-md bg-green-50 p-4 border border-green-200">
      <div class="flex">
        <svg class="h-5 w-5 text-green-400" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
        </svg>
        <div class="ml-3">
          <p class="text-sm font-medium text-green-800">{successMessage}</p>
        </div>
      </div>
    </div>
  )}

  {errorMessage && (
    <div class="mb-6 rounded-md bg-red-50 p-4 border border-red-200">
      <div class="flex">
        <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
        </svg>
        <div class="ml-3">
          <p class="text-sm font-medium text-red-800">{errorMessage}</p>
        </div>
      </div>
    </div>
  )}

  <!-- ====================================================== -->
  <!-- HEADER DE LA PÁGINA -->
  <!-- ====================================================== -->
  <div class="sm:flex sm:items-center sm:justify-between mb-8">
    <div>
      <h1 class="text-2xl font-bold leading-6 text-gray-900">Directorio de Personas</h1>
      <p class="mt-2 text-sm text-gray-700">
        Gestiona la información de los miembros y visitantes de la congregación
      </p>
    </div>
    <div class="mt-4 sm:mt-0 sm:ml-16 sm:flex-none">
      <a
        href="/personas/nueva"
        class="inline-flex items-center justify-center rounded-md bg-green-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-green-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-green-600 transition-all duration-200 transform hover:scale-105"
      >
        <svg class="-ml-0.5 mr-1.5 h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
        </svg>
        Registrar Persona
      </a>
    </div>
  </div>

  <!-- ====================================================== -->
  <!-- BARRA DE BÚSQUEDA Y FILTROS -->
  <!-- ====================================================== -->
  <div class="mb-6 bg-white rounded-lg shadow-sm border border-gray-200 p-4">
    <div class="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-4">
      <!-- Búsqueda por texto -->
      <div class="sm:col-span-2">
        <label for="search-input" class="block text-sm font-medium text-gray-700 mb-1">
          Buscar persona
        </label>
        <div class="relative">
          <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <svg class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
            </svg>
          </div>
          <input
            type="text"
            id="search-input"
            placeholder="Buscar por nombre, apellido o identificación..."
            class="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-green-500 focus:border-green-500 sm:text-sm transition-colors"
          />
        </div>
      </div>

      <!-- Filtro por sede -->
      <div>
        <label for="sede-filter" class="block text-sm font-medium text-gray-700 mb-1">
          Filtrar por sede
        </label>
        <select
          id="sede-filter"
          class="block w-full px-3 py-2 border border-gray-300 rounded-md leading-5 bg-white focus:outline-none focus:ring-1 focus:ring-green-500 focus:border-green-500 sm:text-sm transition-colors"
        >
          <option value="">Todas las sedes</option>
          <!-- Las opciones se llenarán dinámicamente con JavaScript -->
        </select>
      </div>

      <!-- Botón de limpiar filtros -->
      <div class="flex items-end">
        <button
          type="button"
          id="clear-filters"
          class="w-full inline-flex items-center justify-center px-3 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-1 focus:ring-green-500 focus:border-green-500 transition-colors"
        >
          <svg class="-ml-0.5 mr-1.5 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
          </svg>
          Limpiar
        </button>
      </div>
    </div>

    <!-- Estadísticas rápidas -->
    <div class="mt-4 pt-4 border-t border-gray-200">
      <div class="grid grid-cols-1 gap-4 sm:grid-cols-3">
        <div class="text-center">
          <div class="text-2xl font-bold text-green-600" id="total-personas">{personasConEscalas.length}</div>
          <div class="text-sm text-gray-500">Total de personas</div>
        </div>
        <div class="text-center">
          <div class="text-2xl font-bold text-blue-600" id="personas-filtradas">{personasConEscalas.length}</div>
          <div class="text-sm text-gray-500">Resultados mostrados</div>
        </div>
        <div class="text-center">
          <div class="text-2xl font-bold text-purple-600" id="sedes-activas">
            {[...new Set(personasConEscalas.map(p => p.sedes?.nombre_sede))].length}
          </div>
          <div class="text-sm text-gray-500">Sedes activas</div>
        </div>
      </div>
    </div>
  </div>

  <!-- ====================================================== -->
  <!-- TABLA DE PERSONAS (DESKTOP) -->
  <!-- ====================================================== -->
  <div class="hidden lg:block bg-white shadow-sm rounded-lg border border-gray-200 overflow-hidden">
    <table class="min-w-full divide-y divide-gray-200">
      <thead class="bg-gray-50">
        <tr>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
            Persona
          </th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
            Identificación
          </th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
            Sede
          </th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
            Escalas
          </th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
            Teléfono
          </th>
          <th scope="col" class="relative px-6 py-3">
            <span class="sr-only">Acciones</span>
          </th>
        </tr>
      </thead>
      <tbody id="personas-table-body" class="bg-white divide-y divide-gray-200">
        {personasConEscalas.map((persona) => (
          <tr class="persona-row hover:bg-gray-50 transition-colors" 
              data-search-text={`${persona.nombres} ${persona.primer_apellido} ${persona.segundo_apellido} ${persona.numero_id}`.toLowerCase()}
              data-sede={persona.sedes?.nombre_sede || ''}>
            <td class="px-6 py-4 whitespace-nowrap">
              <div class="flex items-center">
                <div class="flex-shrink-0 h-10 w-10">
                  {persona.url_foto ? (
                    <img class="h-10 w-10 rounded-full object-cover" src={persona.url_foto} alt={`Foto de ${persona.nombres}`} />
                  ) : (
                    <div class="h-10 w-10 rounded-full bg-gray-200 flex items-center justify-center">
                      <svg class="h-6 w-6 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                      </svg>
                    </div>
                  )}
                </div>
                <div class="ml-4">
                  <div class="text-sm font-medium text-gray-900">
                    {persona.nombres} {persona.primer_apellido}
                  </div>
                  <div class="text-sm font-medium text-gray-900">
                    {persona.segundo_apellido}
                  </div>
                </div>
              </div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              <div class="text-sm text-gray-500">{persona.tipo_id}</div>
              <div class="text-sm text-gray-900">{persona.numero_id}</div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                {persona.sedes?.nombre_sede || 'N/A'}
              </span>
            </td>
            <td class="px-6 py-4">
              <div class="flex flex-wrap gap-1">
                {persona.escalas.length > 0 ? (
                  persona.escalas.map((escala) => (
                    <span class="inline-flex items-center px-2 py-1 rounded-md text-xs font-medium bg-blue-100 text-blue-800">
                      {escala.nombre_escala}
                    </span>
                  ))
                ) : (
                  <span class="text-xs text-gray-400">Sin escalas</span>
                )}
              </div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
              <div>{persona.telefono}</div>
              <div>{persona.email}</div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
              <div class="flex items-center space-x-2">
                <!-- Botón Ver -->
                <button
                  type="button"
                  class="text-green-600 hover:text-green-900 p-1 rounded-md hover:bg-green-50 transition-colors"
                  title="Ver detalles"
                  onclick={`viewPerson('${persona.id}')`}
                >
                  <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                  </svg>
                </button>
                
                <!-- Botón Editar -->
                <button
                  type="button"
                  class="text-blue-600 hover:text-blue-900 p-1 rounded-md hover:bg-blue-50 transition-colors"
                  title="Editar persona"
                  onclick={`editPerson('${persona.id}')`}
                >
                  <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                  </svg>
                </button>
                
                <!-- Botón Eliminar -->
                <button
                  type="button"
                  class="text-red-600 hover:text-red-900 p-1 rounded-md hover:bg-red-50 transition-colors"
                  title="Eliminar persona"
                  onclick={`deletePerson('${persona.id}', '${persona.nombres} ${persona.primer_apellido}')`}
                >
                  <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                  </svg>
                </button>
              </div>
            </td>
          </tr>
        ))}
      </tbody>
    </table>
  </div>

  <!-- ====================================================== -->
  <!-- VISTA DE TARJETAS (MÓVIL) -->
  <!-- ====================================================== -->
  <div class="lg:hidden space-y-4" id="personas-cards-container">
    {personasConEscalas.map((persona) => (
      <div class="persona-card bg-white rounded-lg shadow-sm border border-gray-200 p-4"
           data-search-text={`${persona.nombres} ${persona.primer_apellido} ${persona.segundo_apellido} ${persona.numero_id}`.toLowerCase()}
           data-sede={persona.sedes?.nombre_sede || ''}>
        <div class="flex items-start space-x-4">
          <!-- Foto -->
          <div class="flex-shrink-0">
            {persona.url_foto ? (
              <img class="h-12 w-12 rounded-full object-cover" src={persona.url_foto} alt={`Foto de ${persona.nombres}`} />
            ) : (
              <div class="h-12 w-12 rounded-full bg-gray-200 flex items-center justify-center">
                <svg class="h-6 w-6 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                </svg>
              </div>
            )}
          </div>
          
          <!-- Información -->
          <div class="flex-1 min-w-0">
            <div class="flex items-start justify-between">
              <div>
                <h3 class="text-sm font-medium text-gray-900 truncate">
                  {persona.nombres} {persona.primer_apellido} {persona.segundo_apellido}
                </h3>
                <p class="text-sm text-gray-500">{persona.numero_id} • {persona.tipo_id}</p>
                <p class="text-sm text-gray-500">{persona.email}</p>
              </div>
              
              <!-- Acciones móvil -->
              <div class="flex items-center space-x-1">
                <button
                  type="button"
                  class="text-green-600 hover:text-green-900 p-1"
                  onclick={`viewPerson('${persona.id}')`}
                >
                  <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                  </svg>
                </button>
                <button
                  type="button"
                  class="text-blue-600 hover:text-blue-900 p-1"
                  onclick={`editPerson('${persona.id}')`}
                >
                  <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                  </svg>
                </button>
                <button
                  type="button"
                  class="text-red-600 hover:text-red-900 p-1"
                  onclick={`deletePerson('${persona.id}', '${persona.nombres} ${persona.primer_apellido}')`}
                >
                  <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                  </svg>
                </button>
              </div>
            </div>
            
            <!-- Sede y escalas -->
            <div class="mt-2 flex flex-wrap items-center gap-2">
              <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                {persona.sedes?.nombre_sede || 'N/A'}
              </span>
              {persona.escalas.map((escala: any) => (
                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                  {escala.nombre_escala}
                </span>
              ))}
            </div>
          </div>
        </div>
      </div>
    ))}
  </div>

  <!-- ====================================================== -->
  <!-- MENSAJE CUANDO NO HAY RESULTADOS -->
  <!-- ====================================================== -->
  <div id="no-results" class="hidden text-center py-12">
    <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
    </svg>
    <h3 class="mt-2 text-sm font-medium text-gray-900">No se encontraron personas</h3>
    <p class="mt-1 text-sm text-gray-500">Intenta ajustar los filtros de búsqueda.</p>
  </div>

  <!-- ====================================================== -->
  <!-- MODAL DE CONFIRMACIÓN DE ELIMINACIÓN -->
  <!-- ====================================================== -->
  <div id="delete-modal" class="fixed inset-0 z-50 hidden overflow-y-auto">
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
      <!-- Overlay -->
      <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>
      
      <!-- Modal -->
      <div class="inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6">
        <div class="sm:flex sm:items-start">
          <div class="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10">
            <svg class="h-6 w-6 text-red-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"/>
            </svg>
          </div>
          <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
            <h3 class="text-lg leading-6 font-medium text-gray-900">Eliminar persona</h3>
            <div class="mt-2">
              <p class="text-sm text-gray-500">
                ¿Estás seguro de que quieres eliminar a <span id="delete-person-name" class="font-medium"></span>? 
                Esta acción no se puede deshacer.
              </p>
            </div>
          </div>
        </div>
        <div class="mt-5 sm:mt-4 sm:flex sm:flex-row-reverse">
          <button
            type="button"
            id="confirm-delete"
            class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 sm:ml-3 sm:w-auto sm:text-sm transition-colors"
          >
            Eliminar
          </button>
          <button
            type="button"
            id="cancel-delete"
            class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 sm:mt-0 sm:w-auto sm:text-sm transition-colors"
          >
            Cancelar
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- ====================================================== -->
  <!-- SCRIPTS PARA FUNCIONALIDAD -->
  <!-- ====================================================== -->
  <script define:vars={{ personas: personasConEscalas }}>
    // Variables globales
    let allPersonas = personas;
    let filteredPersonas = personas;
    let personToDelete = null;

    // Inicializar la página
    document.addEventListener('DOMContentLoaded', function() {
      initializeFilters();
      setupEventListeners();
      updateStats();
    });

    // Configurar los filtros
    function initializeFilters() {
      // Llenar el select de sedes
      const sedeFilter = document.getElementById('sede-filter');
      const sedes = [...new Set(allPersonas.map(p => p.sedes?.nombre_sede).filter(Boolean))];
      
      sedes.forEach(sede => {
        const option = document.createElement('option');
        option.value = sede;
        option.textContent = sede;
        sedeFilter.appendChild(option);
      });
    }

    // Configurar event listeners
    function setupEventListeners() {
      const searchInput = document.getElementById('search-input');
      const sedeFilter = document.getElementById('sede-filter');
      const clearFilters = document.getElementById('clear-filters');

      // Búsqueda en tiempo real
      searchInput.addEventListener('input', debounce(filterPersonas, 300));
      sedeFilter.addEventListener('change', filterPersonas);
      clearFilters.addEventListener('click', clearAllFilters);

      // Modal de eliminación
      const deleteModal = document.getElementById('delete-modal');
      const confirmDelete = document.getElementById('confirm-delete');
      const cancelDelete = document.getElementById('cancel-delete');

      confirmDelete.addEventListener('click', confirmDeletePerson);
      cancelDelete.addEventListener('click', closeDeleteModal);
      
      // Cerrar modal al hacer clic en el overlay
      deleteModal.addEventListener('click', function(e) {
        if (e.target === deleteModal) {
          closeDeleteModal();
        }
      });
    }

    // Filtrar personas
    function filterPersonas() {
      const searchTerm = document.getElementById('search-input').value.toLowerCase();
      const sedeFilter = document.getElementById('sede-filter').value;

      filteredPersonas = allPersonas.filter(persona => {
        const searchText = `${persona.nombres} ${persona.primer_apellido} ${persona.segundo_apellido} ${persona.numero_id}`.toLowerCase();
        const matchesSearch = !searchTerm || searchText.includes(searchTerm);
        const matchesSede = !sedeFilter || persona.sedes?.nombre_sede === sedeFilter;
        
        return matchesSearch && matchesSede;
      });

      updateDisplay();
      updateStats();
    }

    // Actualizar la visualización
    function updateDisplay() {
      // Mostrar/ocultar filas de la tabla
      const tableRows = document.querySelectorAll('.persona-row');
      const cards = document.querySelectorAll('.persona-card');
      const noResults = document.getElementById('no-results');

      let visibleCount = 0;

      // Actualizar tabla
      tableRows.forEach(row => {
        const personId = row.querySelector('button[onclick*="viewPerson"]')?.getAttribute('onclick')?.match(/'([^']+)'/)?.[1];
        const isVisible = filteredPersonas.some(p => p.id === personId);
        
        if (isVisible) {
          row.style.display = '';
          visibleCount++;
        } else {
          row.style.display = 'none';
        }
      });

      // Actualizar tarjetas
      cards.forEach(card => {
        const personId = card.querySelector('button[onclick*="viewPerson"]')?.getAttribute('onclick')?.match(/'([^']+)'/)?.[1];
        const isVisible = filteredPersonas.some(p => p.id === personId);
        
        if (isVisible) {
          card.style.display = '';
        } else {
          card.style.display = 'none';
        }
      });

      // Mostrar mensaje de "no hay resultados"
      if (visibleCount === 0) {
        noResults.classList.remove('hidden');
      } else {
        noResults.classList.add('hidden');
      }
    }

    // Actualizar estadísticas
    function updateStats() {
      document.getElementById('total-personas').textContent = allPersonas.length;
      document.getElementById('personas-filtradas').textContent = filteredPersonas.length;
    }

    // Limpiar todos los filtros
    function clearAllFilters() {
      document.getElementById('search-input').value = '';
      document.getElementById('sede-filter').value = '';
      filteredPersonas = allPersonas;
      updateDisplay();
      updateStats();
    }

    // Funciones de acciones
    window.viewPerson = function(personId) {
      // Por ahora, redirigir a una página de detalles (a implementar)
      window.location.href = `/personas/${personId}`;
    };

    window.editPerson = function(personId) {
      // Redirigir a la página de edición (a implementar)
      window.location.href = `/personas/${personId}/editar`;
    };

    window.deletePerson = function(personId, personName) {
      personToDelete = personId;
      document.getElementById('delete-person-name').textContent = personName;
      document.getElementById('delete-modal').classList.remove('hidden');
    };

    function confirmDeletePerson() {
      if (personToDelete) {
        // Crear un formulario para enviar la eliminación
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = `/api/personas/${personToDelete}/delete`;
        
        // Añadir token CSRF si es necesario
        const csrfInput = document.createElement('input');
        csrfInput.type = 'hidden';
        csrfInput.name = '_method';
        csrfInput.value = 'DELETE';
        form.appendChild(csrfInput);
        
        document.body.appendChild(form);
        form.submit();
      }
    }

    function closeDeleteModal() {
      document.getElementById('delete-modal').classList.add('hidden');
      personToDelete = null;
    }

    // Utilidad para debounce
    function debounce(func, wait) {
      let timeout;
      return function executedFunction(...args) {
        const later = () => {
          clearTimeout(timeout);
          func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    }
  </script>
</Layout>

